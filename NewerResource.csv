AlgorithmID,AlgorithmName,EnglishName,ParentCategory,AlgorithmType,TimeComplexity,SpaceComplexity,Stability,UseCases,CoreIdea,ApplicableDomains,ProsConsAnalysis
A001,冒泡排序,Bubble Sort,排序,比较排序,O(n^2),O(1),稳定,小规模数据排序;教学示例,重复遍历待排序的列表，比较相邻的两个元素，如果顺序错误就交换它们。遍历列表的工作是重复地进行直到没有再需要交换，也就是说该列表已经排序完成。每一次遍历至少会将一个元素（最大或最小）放到其最终位置。,计算机科学;软件工程,优点：算法思想简单，易于理解和实现，代码量少。缺点：时间复杂度高，效率低下，不适合大规模数据排序。在所有排序算法中，冒泡排序的性能是最差的之一，尤其是在数据量较大时，其O(n^2)的平均和最坏时间复杂度使其变得非常慢，实际应用中很少使用。
A002,选择排序,Selection Sort,排序,比较排序,O(n^2),O(1),不稳定,小规模数据排序;教学示例,在未排序的序列中找到最小（或最大）元素，存放到排序序列的起始位置，然后再从剩余未排序元素中继续寻找最小（或最大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。,计算机科学;软件工程,优点：实现简单，空间复杂度为O(1)，对数据移动次数少（最多n-1次）。缺点：时间复杂度高，无论是最好、最坏还是平均情况，都是O(n^2)，不适合处理大规模数据。其性能在所有O(n^2)排序算法中相对稳定，但整体效率不高。
A003,插入排序,Insertion Sort,排序,比较排序,O(n^2),O(1),稳定,小规模数据排序;基本有序数据排序,通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。就像玩扑克牌时，每次摸到一张牌，就把它插入到手中已有的牌的正确位置。,计算机科学;软件工程,优点：对于小规模数据或基本有序的数据，效率较高（接近O(n)），且是稳定的排序算法，空间复杂度为O(1)，实现简单。缺点：对于大规模的乱序数据，其O(n^2)的时间复杂度使其效率低下。
A004,快速排序,Quick Sort,排序,比较排序;分治,平均O(n log n)，最坏O(n^2),平均O(log n)，最坏O(n) (递归栈空间),不稳定,大规模数据排序;内部排序,采用分治策略。它选择一个元素作为“基准”（pivot），然后将数组分成两部分：一部分是所有小于基准的元素，另一部分是所有大于基准的元素。对这两部分递归地进行快速排序，直到整个数组有序。核心在于分区操作，使得基准元素处于其最终的有序位置。,计算机科学;软件工程;算法竞赛,优点：平均时间复杂度为O(n log n)，在实际应用中通常表现良好，是效率最高的通用排序算法之一，常用于大规模数据的排序。缺点：最坏情况下时间复杂度为O(n^2)，发生在输入数据已经有序或接近有序，且选择的基准不当（如总是选择最小或最大元素）时。快速排序是不稳定的排序算法，即相等元素的相对顺序可能会改变。
A005,归并排序,Merge Sort,排序,比较排序;分治,O(n log n),O(n),稳定,大规模数据排序;外部排序;并行排序,将序列递归地分成两半，直到每个子序列只有一个元素（自然有序）。然后，将这些子序列两两合并，每次合并都将两个有序的子序列合并成一个更大的有序子序列，直到所有元素合并成一个完整的有序序列。合并操作是其核心，通过比较两个子序列的元素并按顺序放入新数组实现。,计算机科学;软件工程;大数据处理,优点：时间复杂度稳定为O(n log n)，无论是最好、最坏还是平均情况，都保持高效。它是稳定的排序算法，适合处理大规模数据，且易于并行化。缺点：需要额外的O(n)空间来存储合并过程中的临时数组，这在内存受限的环境下可能成为瓶颈。
A006,堆排序,Heap Sort,排序,比较排序,O(n log n),O(1),不稳定,大规模数据排序;优先级队列实现,利用堆这种数据结构来排序。首先将待排序序列构造成一个大顶堆（或小顶堆），此时堆顶元素是最大（或最小）值。然后将堆顶元素与堆的最后一个元素交换，将最大（或最小）元素“沉”到数组末尾。接着对剩余的n-1个元素重新调整为堆，重复此过程，直到所有元素排序完毕。,计算机科学;软件工程;数据结构,优点：时间复杂度稳定为O(n log n)，且空间复杂度为O(1)，是一种原地排序算法，效率较高。缺点：堆排序是不稳定的排序算法。在实际应用中，由于其常数因子较大，通常比快速排序慢，且对缓存不友好。
A007,计数排序,Counting Sort,排序,非比较排序,O(n+k),O(k),稳定,整数排序;小范围整数排序,对输入数据进行计数，将每个元素出现的次数存放在一个辅助数组中，然后根据辅助数组中存储的次数，将数据按顺序输出到结果数组中。适用于整数且范围不大的数据。,计算机科学;数据处理,优点：当待排序的整数范围k不大时，时间复杂度为O(n+k)，效率非常高，是线性时间排序。它是稳定的排序算法。缺点：只能用于整数排序，且当整数范围k非常大时，需要大量的额外空间，不适合处理浮点数或字符串。
A008,桶排序,Bucket Sort,排序,非比较排序,平均O(n+k)，最坏O(n^2),O(n+k),稳定,浮点数排序;数据均匀分布的排序,将待排序的数据分到有限数量的桶里，每个桶再分别排序（可以使用其他排序算法），最后将所有桶中的数据依次取出，形成有序序列。适用于数据均匀分布的情况。,计算机科学;大数据处理,优点：当输入数据均匀分布时，平均时间复杂度可以达到O(n+k)，效率很高。它是稳定的排序算法。缺点：对数据的分布情况有要求，如果数据分布不均匀，可能导致某些桶中数据过多，退化为O(n^2)。需要额外的空间来存储桶。
A009,基数排序,Radix Sort,排序,非比较排序,O(nk),O(n+k),稳定,多位数整数排序;字符串排序,将整数按位数切割成不同的数字，然后从最低位到最高位依次进行排序。每次排序都使用一个稳定的排序算法（如计数排序）对当前位进行排序。适用于整数或可以表示为整数的数据。,计算机科学;数据处理,优点：时间复杂度为O(nk)，当k（位数）较小时，效率非常高，是线性时间排序。它是稳定的排序算法。缺点：只能用于整数或可以表示为整数的数据。需要额外的空间来存储中间结果，且实现相对复杂。
A010,线性查找,Linear Search,搜索,顺序搜索,O(n),O(1),不适用,无序数据查找;小规模数据查找,从数据序列的第一个元素开始，逐个与目标值进行比较，直到找到目标值或遍历完整个序列。如果找到则返回其位置，否则表示未找到。,计算机科学;软件工程,优点：算法简单，易于实现，对数据结构没有要求，适用于任何无序或有序的序列。缺点：效率低下，时间复杂度为O(n)，对于大规模数据查找效率极低，不适合大数据量的场景。
A011,二分查找,Binary Search,搜索,分治搜索,O(log n),O(1),不适用,有序数据查找;字典查询;查找特定值,适用于有序数组。每次查找都通过比较中间元素与目标值，将查找范围缩小一半。如果中间元素等于目标值，则查找成功；如果目标值小于中间元素，则在左半部分继续查找；如果目标值大于中间元素，则在右半部分继续查找，直到找到或查找范围为空。,计算机科学;软件工程;数据库查询,优点：效率高，时间复杂度为O(log n)，对于大规模有序数据查找非常快。缺点：要求数据必须是有序的，且只能在顺序存储结构（如数组）上进行操作，对链表等不适用。插入和删除操作会破坏有序性，需要重新排序。
A012,深度优先搜索,DFS,图算法,图遍历,O(V+E),O(V),不适用,图遍历;路径查找;连通性判断;拓扑排序,从图中某个顶点V出发，访问此顶点，然后依次从V的未被访问的邻接点出发，深度优先遍历图，直到图中所有和V有路径相通的顶点都被访问到。如果图中还有未被访问的顶点，则选择其中一个作为起始点，重复上述过程。核心思想是“不撞南墙不回头”。,计算机科学;图论;人工智能,优点：实现简单，可以找到所有连通的顶点。适用于寻找路径、判断连通性等。缺点：不保证找到最短路径。对于大规模图，递归深度可能过大导致栈溢出。
A013,广度优先搜索,BFS,图算法,图遍历,O(V+E),O(V),不适用,图遍历;最短路径查找(无权图);网络爬虫;社交网络分析,从图中某个顶点V出发，先访问其所有邻接点，再依次访问这些邻接点的所有未被访问的邻接点，以此类推，逐层向外扩展，直到所有可达顶点都被访问。核心思想是“层层推进”。,计算机科学;图论;人工智能;网络,优点：能够找到无权图中的最短路径。实现简单，通常使用队列来辅助实现，避免了深度优先搜索可能出现的栈溢出问题。缺点：需要额外的空间来存储队列。对于某些问题，可能需要遍历更多的节点才能找到目标。
A014,Dijkstra算法,Dijkstra's Algorithm,图算法,最短路径,O(E log V) 或 O(V^2),O(V),不适用,单源最短路径(非负权);网络路由;地图导航,用于计算从图中一个顶点到所有其他顶点的最短路径，前提是边的权重是非负的。它维护一个顶点集合，这些顶点的最短路径已经被确定。每次迭代从剩余顶点中选择一个距离源点最近的顶点，并更新其邻接点的距离。,计算机科学;图论;网络路由;地理信息系统,优点：能够正确计算出单源最短路径，且算法思想直观易懂。对于非负权图，效率较高。缺点：不能处理负权边。对于边数E远大于顶点数V的稠密图，效率可能不如Bellman-Ford算法。
A015,Floyd-Warshall算法,Floyd-Warshall Algorithm,图算法,最短路径,O(V^3),O(V^2),不适用,所有顶点对最短路径;交通规划;旅行商问题变种,用于计算图中所有顶点对之间的最短路径。它通过动态规划的思想，逐步考虑所有可能的中间顶点，来更新任意两点之间的最短路径。算法的核心在于三重循环，外层循环遍历中间顶点，内层循环遍历起始点和终止点。,计算机科学;图论;运筹学,优点：能够处理带负权边的图（但不处理负权环）。算法简洁，易于实现。可以找到所有顶点对之间的最短路径。缺点：时间复杂度为O(V^3)，对于大规模图效率较低。空间复杂度为O(V^2)。
A016,Prim算法,Prim's Algorithm,图算法,最小生成树,O(E log V) 或 O(V^2),O(V),不适用,最小生成树;网络设计;电路布线,从一个起始顶点开始，逐步添加边来构建最小生成树。每次选择一条连接树中顶点和树外顶点，且权重最小的边，并将其对应的树外顶点加入到树中，直到所有顶点都被包含在树中。它类似于Dijkstra算法，但目的是找到最小生成树而不是最短路径。,计算机科学;图论;网络设计,优点：能够正确找到连通图的最小生成树。对于稠密图（边数多）效率较高（使用邻接矩阵实现时）。缺点：对于稀疏图（边数少），Kruskal算法通常更优。
A017,Kruskal算法,Kruskal's Algorithm,图算法,最小生成树,O(E log E) 或 O(E log V),O(V+E),不适用,最小生成树;网络设计;电路布线,将图中所有边按权重从小到大排序，然后依次遍历每条边。如果当前边连接的两个顶点不在同一个连通分量中，则将这条边加入到最小生成树中，并合并这两个连通分量。直到生成树包含V-1条边。通常使用并查集来判断和合并连通分量。,计算机科学;图论;网络设计,优点：能够正确找到连通图的最小生成树。对于稀疏图（边数少）效率较高。算法思想相对直观，易于理解。缺点：需要对边进行排序，对于边数非常多的图，排序可能耗时。
A018,拓扑排序,Topological Sort,图算法,图遍历,O(V+E),O(V),不适用,任务调度;课程安排;依赖解决,对有向无环图（DAG）的顶点进行线性排序，使得对于每条有向边(u，v)，顶点u都在顶点v之前。通常有两种实现方式：Kahn算法（基于入度）和DFS算法（基于深度优先遍历）。,计算机科学;图论;项目管理;编译器设计,优点：能够解决有向无环图中的依赖关系问题，确保任务按正确的顺序执行。缺点：只能应用于有向无环图，对于有环图无法进行拓扑排序。结果可能不唯一。
A019,Bellman-Ford算法,Bellman-Ford Algorithm,图算法,最短路径,O(VE),O(V),不适用,单源最短路径(含负权);负权环检测,用于计算从单个源点到所有其他顶点的最短路径，可以处理边的权重为负数的情况。它通过V-1次迭代，每次迭代都尝试对所有边进行松弛操作，以逐步找到最短路径。如果在第V次迭代时仍能进行松弛，则说明图中存在负权环。,计算机科学;图论;网络路由,优点：能够正确处理含有负权边的图，并且可以检测出负权环。缺点：时间复杂度为O(VE)，比Dijkstra算法慢，对于大规模图效率较低。
A020,A*搜索算法,A* Search Algorithm,搜索,启发式搜索;图遍历,O(E) (取决于启发函数),O(V),不适用,路径规划;游戏AI;机器人导航,A*算法是一种启发式搜索算法，用于在图中找到从起点到终点的最短路径。它结合了Dijkstra算法（保证找到最短路径）和贪婪最佳优先搜索（利用启发式信息加速搜索）。它通过评估函数 $f(n) = g(n) + h(n)$ 来选择下一个要扩展的节点，其中$g(n)$是从起点到当前节点的实际代价，$h(n)$是从当前节点到目标节点的估计代价（启发式函数）。,计算机科学;人工智能;游戏开发;机器人学,优点：在许多实际应用中比Dijkstra算法效率更高，因为它利用启发式信息来指导搜索方向，通常能更快地找到最短路径。如果启发式函数是可接受的（Admissible）且一致的（Consistent），A*算法能保证找到最优解。缺点：启发式函数的选择至关重要，不好的启发式函数可能导致性能下降甚至退化为Dijkstra或BFS。需要存储已访问节点，可能占用大量内存。
A021,KMP算法,KMP Algorithm,字符串,模式匹配,O(m+n),O(m),不适用,字符串查找;文本编辑器的查找功能,Knuth-Morris-Pratt算法是一种字符串匹配算法。它通过预处理模式串（构建一个部分匹配表，也称作next数组），在匹配过程中当出现不匹配时，可以利用已经匹配过的信息，避免模式串指针回溯，从而提高效率。核心思想是利用模式串自身的特性，避免不必要的比较。,计算机科学;文本处理;生物信息学,优点：时间复杂度为O(m+n)，是线性时间复杂度，效率高，优于朴素的字符串匹配算法。避免了主串指针的回溯，提高了匹配效率。缺点：算法理解和实现相对复杂，需要预处理模式串。
A022,Rabin-Karp算法,Rabin-Karp Algorithm,字符串,模式匹配,平均O(m+n)，最坏O(mn),O(m),不适用,字符串查找;文本编辑器的查找功能;剽窃检测,Rabin-Karp算法是一种基于哈希的字符串匹配算法。它通过计算模式串和文本串中每个子串的哈希值，然后比较哈希值来判断是否匹配。当哈希值匹配时，再进行一次字符级别的比较以避免哈希冲突。核心思想是滚动哈希，高效地计算每个子串的哈希值。,计算机科学;文本处理;信息检索,优点：平均时间复杂度为O(m+n)，在实际应用中效率较高。易于扩展到多模式匹配。缺点：最坏情况下时间复杂度可能退化到O(mn)，当哈希冲突频繁发生时。需要选择合适的哈希函数和模数来减少冲突。
A023,Boyer-Moore算法,Boyer-Moore Algorithm,字符串,模式匹配,平均O(n/m)，最坏O(mn),O(字符集大小),不适用,字符串查找;文本编辑器的查找功能,Boyer-Moore算法是一种高效的字符串匹配算法。它从模式串的末尾开始与文本串进行比较，当出现不匹配时，根据“坏字符规则”和“好后缀规则”尽可能大地向右移动模式串，从而跳过不必要的比较。核心思想是利用不匹配信息进行大步跳跃。,计算机科学;文本处理;信息检索,优点：在实际应用中通常比KMP算法更快，平均时间复杂度接近O(n/m)，效率非常高。缺点：最坏情况下时间复杂度为O(mn)。算法理解和实现相对复杂。
A024,Manacher算法,Manacher's Algorithm,字符串,模式匹配,O(n),O(n),不适用,最长回文子串查找,Manacher算法用于在线性时间内找到一个字符串中的最长回文子串。它通过预处理字符串（插入特殊字符以处理奇偶长度回文串），然后利用回文串的对称性，避免重复计算，从而达到线性时间复杂度。核心思想是利用已计算的回文半径，跳过不必要的比较。,计算机科学;字符串处理,优点：时间复杂度为O(n)，是线性时间算法，非常高效。能够处理所有情况（奇数和偶数长度回文串）。缺点：算法理解和实现相对复杂，需要对字符串进行预处理。
A025,Z算法,Z-Algorithm,字符串,模式匹配,O(n+m),O(n+m),不适用,字符串匹配;模式匹配;LCP数组构建,Z算法（也称为Z-box算法）用于计算一个字符串S的Z数组。Z数组$Z[i]$表示S和S的后缀$S[i..]$的最长公共前缀的长度。通过计算Z数组，可以高效地进行字符串匹配。核心思想是利用已经计算的Z值，避免重复比较，实现线性时间复杂度。,计算机科学;字符串处理;文本分析,优点：时间复杂度为O(n+m)，是线性时间算法，非常高效。可以用于解决字符串匹配问题，比KMP更易于理解和实现。缺点：相对KMP，其应用场景可能更专注于LCP（最长公共前缀）的计算，但同样可以解决模式匹配。
A026,最长公共子序列,Longest Common Subsequence (LCS),动态规划,序列比对,O(mn),O(mn),不适用,DNA序列比对;文件差异比较;版本控制,LCS算法通过动态规划来解决。它构建一个二维DP表，其中$DP[i][j]$表示字符串A的前i个字符和字符串B的前j个字符的最长公共子序列的长度。通过比较字符，并根据匹配或不匹配的情况，从前一个子问题的解推导出当前子问题的解。,计算机科学;生物信息学;文本处理,优点：能够找到两个序列的最长公共子序列，在许多领域有广泛应用。缺点：时间复杂度为O(mn)，空间复杂度也为O(mn)，对于非常长的序列可能效率较低或内存消耗大。
A027,0/1背包问题,0/1 Knapsack Problem,动态规划,优化问题,O(nW),O(nW) 或 O(W),不适用,资源分配;物品选择;投资组合优化,给定一组物品，每种物品都有自己的重量和价值，在限定的总重量内，选择其中一部分物品，使得总价值最大。0/1背包问题意味着每种物品只能选择一次（0或1）。通过动态规划构建DP表，$DP[i][w]$表示前i个物品在容量为w时的最大价值。,计算机科学;运筹学;算法竞赛,优点：能够找到最优解。动态规划方法思路清晰，易于理解和实现。缺点：时间复杂度为O(nW)，其中W是背包容量，当W非常大时，效率会很低。属于NP-hard问题，动态规划是伪多项式时间解法。
A028,完全背包问题,Unbounded Knapsack Problem,动态规划,优化问题,O(nW),O(nW) 或 O(W),不适用,资源分配;物品选择;找零钱问题,与0/1背包问题类似，但每种物品可以无限次选择。动态规划的递推关系略有不同，允许从当前物品再次选择。$DP[w]$表示容量为w时的最大价值，在计算$DP[w]$时，可以考虑多次选择同一个物品。,计算机科学;运筹学;算法竞赛,优点：能够找到最优解。适用于物品可以重复选择的场景。缺点：时间复杂度为O(nW)，当W非常大时，效率会很低。
A029,最长递增子序列,Longest Increasing Subsequence (LIS),动态规划,序列问题,O(n log n) 或 O(n^2),O(n),不适用,序列分析;数据挖掘;生物信息学,LIS算法的目标是找到一个序列中最长的严格递增的子序列。可以通过动态规划实现，其中$DP[i]$表示以第i个元素结尾的最长递增子序列的长度。更优的O(n log n)方法利用二分查找来维护一个最小末尾元素数组。,计算机科学;数据分析;算法竞赛,优点：能够找到序列中的最长递增子序列。O(n log n)的方法效率较高。缺点：O(n^2)的方法对于大规模数据效率较低。
A030,编辑距离,Edit Distance (Levenshtein Distance),动态规划,序列比对;字符串相似度,O(mn),O(mn) 或 O(min(m，n)),不适用,拼写检查;基因序列比对;自然语言处理,编辑距离（或Levenshtein距离）是衡量两个字符串之间相似度的一种指标，表示将一个字符串转换成另一个字符串所需的最少单字符编辑操作（插入、删除或替换）的次数。通过动态规划构建DP表，$DP[i][j]$表示第一个字符串的前i个字符和第二个字符串的前j个字符之间的编辑距离。,计算机科学;自然语言处理;生物信息学,优点：能够准确衡量字符串之间的相似度，在许多文本处理任务中非常有用。缺点：时间复杂度为O(mn)，空间复杂度也为O(mn)，对于非常长的字符串可能效率较低或内存消耗大。
A031,矩阵链乘法,Matrix Chain Multiplication,动态规划,优化问题,O(n^3),O(n^2),不适用,矩阵运算优化,给定一系列矩阵，找出一种乘法顺序，使得总的乘法次数最少。矩阵乘法满足结合律但不满足交换律。通过动态规划，将问题分解为子问题，计算每个子链的最优乘法次数，并存储结果以避免重复计算。,计算机科学;线性代数;数值计算,优点：能够找到矩阵链乘法的最优顺序，显著减少计算量。缺点：时间复杂度为O(n^3)，其中n是矩阵的数量，对于大量矩阵的链乘效率较低。
A032,最长回文子串,Longest Palindromic Substring,动态规划,字符串处理,O(n^2),O(n^2),不适用,文本处理;生物信息学,通过动态规划，定义$DP[i][j]$为布尔值，表示从索引i到j的子串是否为回文串。如果$S[i] == S[j]$且$DP[i+1][j-1]$为真，则$DP[i][j]$为真。遍历所有可能的子串，并记录最长的回文子串。,计算机科学;字符串处理,优点：能够找到字符串中的最长回文子串。动态规划方法思路清晰。缺点：时间复杂度为O(n^2)，空间复杂度为O(n^2)，对于长字符串效率较低。Manacher算法可以达到O(n)时间复杂度。
A033,背包问题,Knapsack Problem (General),动态规划,优化问题,O(nW),O(nW),不适用,资源分配;项目选择;组合优化,一个通用的概念，包含0/1背包、完全背包、多重背包等变种。核心思想是给定一组物品，每件物品有重量和价值，目标是在不超过背包容量的前提下，使装入背包的物品总价值最大。,计算机科学;运筹学;算法竞赛,优点：能够解决多种资源分配和优化问题，找到最优解。动态规划是解决这类问题的标准方法。缺点：通常具有伪多项式时间复杂度，当背包容量或物品数量非常大时，计算成本高昂。
A034,最长公共子串,Longest Common Substring,动态规划,字符串相似度,O(mn),O(mn),不适用,文本相似度;DNA序列比对,与最长公共子序列不同，子串要求字符在原字符串中是连续的。通过动态规划，定义$DP[i][j]$为以$S1[i]$和$S2[j]$结尾的最长公共子串的长度。如果$S1[i] == S2[j]$，则$DP[i][j] = DP[i-1][j-1] + 1$，否则为0。记录DP表中的最大值。,计算机科学;字符串处理;生物信息学,优点：能够找到两个字符串中的最长公共子串。缺点：时间复杂度为O(mn)，空间复杂度为O(mn)，对于长字符串效率较低。
A035,区间DP,Interval Dynamic Programming,动态规划,区间问题,O(n^3),O(n^2),不适用,石子合并;括号匹配;最优二叉搜索树,区间DP通常用于解决与区间相关的优化问题。其核心思想是将一个大区间的问题分解为更小的子区间问题，然后通过子问题的解来推导大问题的解。通常采用枚举分割点的方式进行状态转移。,计算机科学;算法竞赛,优点：能够解决一类具有最优子结构和重叠子问题的区间优化问题。缺点：通常时间复杂度较高，为O(n^3)，空间复杂度为O(n^2)。
A036,数位DP,Digit Dynamic Programming,动态规划,计数问题,O(log N * K),O(log N * K),不适用,统计满足特定条件的数字个数,数位DP用于解决在一给定区间$[L，R]$内，统计满足某种性质的数字的个数。它将数字按位分解，通过DP状态来记录当前位、是否达到上限、是否包含前导零等信息，从而避免重复计算。核心思想是记忆化搜索或迭代DP。,计算机科学;算法竞赛,优点：能够高效解决特定区间内数字计数问题，避免暴力枚举。缺点：状态定义和转移相对复杂，需要仔细考虑边界条件和各种状态。
A037,状态压缩DP,State Compression Dynamic Programming,动态规划,组合优化,O(N * 2^N * M),O(N * 2^N),不适用,旅行商问题;TSP;哈密顿回路;集合覆盖,当问题的状态可以用一个二进制数（位运算）来表示时，可以使用状态压缩DP。例如，旅行商问题中，一个二进制数可以表示已经访问过的城市集合。DP状态通常包含当前位置和已访问状态。,计算机科学;算法竞赛;组合优化,优点：能够解决一些NP-hard问题的特定规模实例，将指数级的搜索空间通过DP优化。缺点：时间复杂度和空间复杂度都与$2^N$相关，因此N不能太大（通常N<20）。
A038,树形DP,Tree Dynamic Programming,动态规划,树结构问题,O(N) 或 O(N log N),O(N),不适用,树的最大独立集;树的直径;树的重心,树形DP是应用于树结构上的动态规划。它利用树的递归性质，从叶子节点向根节点（或从根节点向叶子节点）进行状态转移，通常通过DFS遍历计算子树的信息，然后合并到父节点。常见的状态定义包括以当前节点为根的子树的信息。,计算机科学;算法竞赛;网络拓扑分析,优点：能够高效解决树结构上的优化和计数问题，时间复杂度通常为O(N)。缺点：需要对树的遍历和状态转移有深入理解，状态定义可能比较灵活。
A039,期望DP,Expected Value Dynamic Programming,动态规划,概率问题,O(N*M),O(N*M),不适用,概率游戏;随机过程分析,期望DP用于计算某种随机过程的期望值。DP状态通常表示在某个状态下，达到目标状态的期望步数或期望收益。状态转移方程涉及概率和期望的计算，通常是倒序推导（从目标状态推向初始状态）。,计算机科学;概率论;算法竞赛,优点：能够解决涉及概率和期望的复杂问题。缺点：状态定义和转移方程的推导相对复杂，需要扎实的概率论基础。
A040,回溯算法,Backtracking Algorithm,搜索,组合问题,指数级,O(N) (递归栈),不适用,组合问题;排列问题;子集问题;N皇后问题;数独求解,回溯算法是一种通过探索所有可能的候选解来找出所有的解的算法。当算法在搜索过程中发现当前路径不可能达到目标时，就“回溯”到上一步，尝试另一条路径。它是一种深度优先遍历思想的应用，通常用递归实现。,计算机科学;人工智能;组合优化,优点：能够找到所有可能的解，或找到满足条件的第一个解。适用于解决组合、排列、子集等问题。缺点：时间复杂度通常是指数级的，对于大规模问题效率极低。需要剪枝操作来优化性能。
A041,贪心算法,Greedy Algorithm,优化问题,局部最优,多变,多变,不适用,活动选择问题;霍夫曼编码;最小生成树(Kruskal，Prim),在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是全局最好或最优的算法。它不考虑后续步骤的影响，只关注当前局部最优解。,计算机科学;运筹学;算法竞赛,优点：算法简单，易于实现，效率通常较高。在某些问题上能够找到全局最优解。缺点：不一定能找到全局最优解，只有当问题具有“贪心选择性质”和“最优子结构性质”时才能保证正确性。需要证明其正确性。
A042,分治算法,Divide and Conquer Algorithm,通用算法范式,递归,多变,多变,不适用,归并排序;快速排序;大整数乘法;最近点对问题,将一个大规模问题分解为若干个规模较小的相同子问题，对这些子问题进行求解，然后将子问题的解合并，得到原问题的解。通常采用递归实现。,计算机科学;算法设计,优点：能够将复杂问题分解为更易于管理和解决的子问题。许多高效算法都基于分治思想。易于并行化。缺点：递归实现可能导致额外的空间开销（栈空间）。子问题的划分和合并需要仔细设计。
A043,蒙特卡罗方法,Monte Carlo Method,随机算法,数值计算;模拟,多变,多变,不适用,积分计算;金融建模;物理模拟;复杂系统行为预测,蒙特卡罗方法是一类通过随机采样或模拟来解决计算问题的方法。它利用随机数生成大量的样本，然后通过统计这些样本来估计问题的解。例如，通过在正方形内随机投点来估计圆周率。,计算机科学;统计学;金融;物理学,优点：适用于解决那些难以用确定性算法解决的问题，尤其是高维问题。易于实现，可以得到近似解。缺点：结果是概率性的，需要足够多的样本才能保证精度。收敛速度通常较慢，精度提高需要大量计算资源。
A044,拉斯维加斯算法,Las Vegas Algorithm,随机算法,优化问题;搜索,多变,多变,不适用,八皇后问题;素数测试(Miller-Rabin),拉斯维加斯算法是一种随机化算法，它总是能给出正确的结果，但运行时间是不确定的。它通过随机选择来寻找解，如果找不到，则重新尝试，直到找到为止。与蒙特卡罗算法不同，它不牺牲结果的正确性。,计算机科学;密码学;算法设计,优点：总是能给出正确答案。在某些情况下，其平均运行时间可能远优于确定性算法。缺点：运行时间不确定，最坏情况下可能非常慢。
A045,遗传算法,Genetic Algorithm (GA),优化算法,启发式搜索;仿生算法,多变,多变,不适用,组合优化;机器学习参数优化;工程设计,遗传算法是一种模拟自然选择和遗传机制的全局优化算法。它通过模拟生物进化过程中的选择、交叉（Crossover）和变异（Mutation）等操作，迭代地改进解的种群，最终收敛到最优解或近似最优解。适用于解决复杂的优化问题。,计算机科学;人工智能;机器学习;运筹学,优点：能够处理复杂的、非线性的、多模态的优化问题，不依赖于梯度信息。具有全局搜索能力，可以避免陷入局部最优。缺点：收敛速度可能较慢。参数选择（种群大小、交叉率、变异率等）对性能影响大，需要经验调整。不保证找到全局最优解，通常是近似最优解。
A046,模拟退火算法,Simulated Annealing (SA),优化算法,启发式搜索,多变,多变,不适用,组合优化;VLSI设计;图像处理,模拟退火算法是一种基于物理退火过程的启发式搜索算法，用于解决组合优化问题。它从一个随机初始解开始，通过随机扰动生成新解。与贪心算法不同，它以一定的概率接受较差的解，从而跳出局部最优，随着“温度”的降低，接受较差解的概率逐渐减小，最终收敛到全局最优解或近似最优解。,计算机科学;人工智能;机器学习;运筹学,优点：能够跳出局部最优，具有全局搜索能力。适用于解决复杂的组合优化问题，不依赖于梯度信息。缺点：收敛速度可能较慢。参数（初始温度、降温速率、迭代次数等）的选择对性能影响大，需要经验调整。不保证找到全局最优解。
A047,蚁群算法,Ant Colony Optimization (ACO),优化算法,启发式搜索;仿生算法,多变,多变,不适用,旅行商问题;路径规划;网络路由,蚁群算法是一种模拟蚂蚁觅食行为的启发式优化算法。蚂蚁在寻找食物时会释放信息素，其他蚂蚁会倾向于沿着信息素浓度高的路径前进。算法通过模拟信息素的积累和挥发过程，最终找到最优路径。适用于解决组合优化问题。,计算机科学;人工智能;机器学习;运筹学,优点：具有分布式计算的特点，鲁棒性强，能够处理动态问题。适用于解决旅行商问题等复杂的组合优化问题。缺点：收敛速度可能较慢。参数选择（信息素挥发率、信息素增加量等）对性能影响大。
A048,粒子群优化算法,Particle Swarm Optimization (PSO),优化算法,启发式搜索;仿生算法,多变,多变,不适用,函数优化;机器学习参数优化;图像处理,粒子群优化算法是一种模拟鸟群觅食行为的启发式优化算法。它将每个候选解看作一个在搜索空间中飞行的“粒子”，每个粒子根据其自身找到的最佳位置和整个群体找到的最佳位置来调整其飞行速度和位置，从而逐步逼近最优解。,计算机科学;人工智能;机器学习;优化,优点：算法简单，易于实现，参数较少。收敛速度相对较快。适用于解决连续函数优化问题。缺点：容易陷入局部最优，尤其是在高维复杂问题中。对参数选择敏感。
A049,支持向量机,Support Vector Machine (SVM),机器学习,分类;回归,训练O(n^2)到O(n^3),预测O(维度)，O(特征数),不适用,文本分类;图像识别;生物信息学,支持向量机是一种二分类模型，其基本思想是找到一个超平面，使得不同类别的样本点被最大间隔地分开。对于非线性可分数据，通过核函数（Kernel Function）将数据映射到高维空间，使其在高维空间中线性可分。核心是最大化分类间隔。,人工智能;机器学习;模式识别,优点：在处理小样本、非线性及高维模式识别问题中表现出许多特有的优势。泛化能力强，不易过拟合。缺点：对大规模数据集训练效率不高。对缺失数据敏感。核函数的选择和参数调整对性能影响大。多分类问题需要额外策略。
A050,决策树,Decision Tree,机器学习,分类;回归,训练O(特征数 * 样本数 * log 样本数)，预测O(树的深度),O(树的深度),不适用,客户流失预测;医疗诊断;信用风险评估,决策树是一种基于树结构进行决策的机器学习模型。它通过一系列规则将数据集递归地划分为更小的子集，直到每个子集都包含同类样本或达到停止条件。每个内部节点代表一个特征测试，每个分支代表一个测试结果，每个叶节点代表一个类别标签或预测值。,人工智能;机器学习;数据挖掘,优点：模型易于理解和解释，可视化强。可以处理数值型和类别型数据。训练速度快。缺点：容易过拟合，尤其是在数据量小或特征复杂时。对数据中的噪声敏感。决策边界是轴平行的，不适合处理某些复杂关系。
A051,随机森林,Random Forest,机器学习,分类;回归,训练O(N_trees * 特征数 * 样本数 * log 样本数)，预测O(N_trees * 树的深度),O(N_trees * 树的深度),不适用,图像识别;医学诊断;金融欺诈检测,随机森林是一种集成学习方法，由多棵决策树组成。每棵树在训练时都使用随机抽样的样本（Bootstrap Aggregating，Bagging）和随机选择的特征子集。最终的预测结果由所有树的投票（分类）或平均（回归）决定。核心思想是“集成学习”和“随机性”。,人工智能;机器学习;数据挖掘,优点：泛化能力强，不易过拟合。对高维数据和缺失数据有较好的处理能力。训练速度快，可并行化。缺点：模型可解释性不如单棵决策树。在某些特定问题上，可能不如SVM或神经网络。
A052,K-近邻算法,K-Nearest Neighbors (KNN),机器学习,分类;回归,训练O(1)，预测O(N*维度),O(N*维度),不适用,推荐系统;手写数字识别;图像分类,K-近邻算法是一种基于实例的学习方法，没有显式的训练过程。在预测时，它通过计算待预测样本与训练集中所有样本的距离，找出距离最近的K个邻居，然后根据这K个邻居的类别（分类）或平均值（回归）来决定待预测样本的类别或值。,人工智能;机器学习;模式识别,优点：算法简单，易于理解和实现。无需训练过程，适用于懒惰学习。对异常值不敏感。缺点：计算复杂度高，尤其是在大规模数据集上，因为每次预测都需要计算距离。对特征维度敏感，高维数据下性能下降（维度灾难）。需要合适的K值和距离度量。
A053,K-Means聚类,K-Means Clustering,机器学习,聚类,O(迭代次数 * K * N * 维度),O(K * 维度),不适用,客户细分;图像分割;文档聚类,K-Means是一种迭代的聚类算法。它将N个数据点划分到K个簇中，使得每个簇内的数据点尽可能相似，而簇间的数据点尽可能不相似。算法步骤：1. 随机选择K个初始质心。2. 将每个数据点分配到最近的质心所属的簇。3. 重新计算每个簇的质心。4. 重复步骤2和3，直到质心不再变化或达到最大迭代次数。,人工智能;机器学习;数据挖掘,优点：算法简单，易于实现，收敛速度快。适用于处理大规模数据集。缺点：需要预先指定K值。对初始质心的选择敏感，可能收敛到局部最优。对异常值敏感。只能发现球形簇，对非球形簇效果不佳。
A054,线性回归,Linear Regression,机器学习,回归,O(特征数^2 * 样本数) (矩阵求逆),O(特征数),不适用,房价预测;股票价格预测;销售预测,线性回归是一种用于预测连续变量的统计模型。它假设因变量与一个或多个自变量之间存在线性关系。模型的目标是找到一条最佳拟合直线（或超平面），使得预测值与实际值之间的残差平方和最小。通常使用最小二乘法来求解模型参数。,人工智能;机器学习;统计学;金融,优点：模型简单，易于理解和解释。计算效率高。在许多实际问题中表现良好。缺点：只能捕捉线性关系，对于非线性关系效果不佳。对异常值敏感。容易出现多重共线性问题。
A055,逻辑回归,Logistic Regression,机器学习,分类,O(特征数^2 * 样本数) (迭代优化),O(特征数),不适用,二分类问题;疾病诊断;信用评分;垃圾邮件识别,逻辑回归是一种用于解决二分类问题的广义线性模型。它通过Sigmoid函数将线性回归的输出映射到[0，1]之间，表示属于某一类别的概率。模型的目标是最大化似然函数，通常使用梯度下降等优化算法来求解参数。,人工智能;机器学习;统计学;金融,优点：模型简单，易于理解和解释，计算效率高。输出是概率值，可解释性强。缺点：只能处理线性可分或近似线性可分的问题。对于非线性关系效果不佳。对特征工程要求较高。
A056,朴素贝叶斯分类器,Naive Bayes Classifier,机器学习,分类,训练O(样本数 * 特征数)，预测O(特征数),O(特征数 * 类别数),不适用,文本分类;垃圾邮件过滤;情感分析,朴素贝叶斯分类器是一种基于贝叶斯定理和特征条件独立性假设的概率分类器。它假设给定类别的情况下，特征之间是相互独立的（“朴素”假设）。通过计算每个类别下每个特征的条件概率，然后利用贝叶斯公式计算后验概率，选择后验概率最大的类别作为预测结果。,人工智能;机器学习;自然语言处理,优点：算法简单，易于实现。训练速度快，在处理大规模文本数据时表现良好。在数据量较少的情况下也能有不错的表现。缺点：“朴素”假设在现实世界中往往不成立，可能导致分类精度下降。对输入数据的形式敏感。
A057,主成分分析,Principal Component Analysis (PCA),机器学习,降维;特征提取,O(min(N，D)^2 * max(N，D)),O(D^2),不适用,数据可视化;特征降维;噪声去除,主成分分析是一种常用的数据降维技术。它通过正交变换将原始数据变换到一个新的坐标系中，使得数据在第一个坐标轴（主成分）上的方差最大，第二个坐标轴上的方差次之，以此类推。目标是找到数据中最重要的“主成分”，从而减少数据的维度，同时保留大部分信息。,人工智能;机器学习;数据分析;图像处理,优点：能够有效降低数据维度，减少计算量，去除噪声。提高模型训练效率，避免维度灾难。缺点：主成分的可解释性可能较差。是线性降维方法，对于非线性结构的数据效果不佳。
A058,梯度下降,Gradient Descent,优化算法,数值优化,O(迭代次数 * 样本数 * 特征数),O(特征数),不适用,机器学习模型训练;神经网络训练,梯度下降是一种常用的优化算法，用于最小化（或最大化）一个函数。它通过沿着函数梯度（或负梯度）的方向迭代地调整参数，逐步逼近函数的局部最小值（或最大值）。有批量梯度下降、随机梯度下降、小批量梯度下降等变种。,人工智能;机器学习;深度学习,优点：简单，易于实现。是许多机器学习模型（如线性回归、逻辑回归、神经网络）训练的核心算法。缺点：可能收敛到局部最优，而不是全局最优。学习率的选择很重要，过大可能导致震荡，过小可能收敛慢。对特征缩放敏感。
A059,反向传播算法,Backpropagation Algorithm,机器学习,神经网络训练,O(网络层数 * 神经元数 * 连接数),O(网络层数 * 神经元数),不适用,神经网络训练;深度学习,反向传播算法是训练人工神经网络的核心算法。它通过计算损失函数对网络中每个权重的梯度，然后利用梯度下降法来更新权重，从而最小化损失函数。算法分为前向传播（计算输出）和反向传播（计算梯度并更新权重）两个阶段。,人工智能;机器学习;深度学习,优点：高效地计算神经网络的梯度，使得多层神经网络的训练成为可能。是深度学习的基础。缺点：容易陷入局部最优。需要大量数据进行训练。对超参数（学习率、网络结构等）敏感。
A060,Adam优化器,Adam Optimizer,机器学习,神经网络训练,O(迭代次数 * 样本数 * 特征数),O(特征数),不适用,深度学习模型训练,Adam（Adaptive Moment Estimation）是一种常用的深度学习优化算法，结合了AdaGrad和RMSProp的优点。它为每个参数计算自适应学习率，并利用梯度的一阶矩估计（均值）和二阶矩估计（非中心方差）来调整学习率。适用于各种深度学习任务。,人工智能;机器学习;深度学习,优点：收敛速度快，性能稳定。对学习率的选择不那么敏感。适用于处理稀疏梯度和非平稳目标。缺点：可能存在泛化性能不如SGD的情况。计算量相对较大。
A061,卷积神经网络,Convolutional Neural Network (CNN),机器学习,深度学习,训练O(层数 * 卷积核大小 * 特征图大小)，预测O(层数 * 卷积核大小 * 特征图大小),O(网络参数量),不适用,图像识别;计算机视觉;自然语言处理(文本卷积),卷积神经网络是一种专门用于处理具有网格状拓扑结构数据（如图像）的深度学习模型。其核心是卷积层，通过卷积核（滤波器）提取局部特征；池化层用于降维和特征不变性；全连接层用于分类或回归。能自动学习特征。,人工智能;机器学习;计算机视觉;图像处理,优点：在图像识别和计算机视觉任务中表现出色，能够自动学习图像特征，无需手动特征工程。对平移、缩放、旋转等具有一定的不变性。缺点：需要大量数据进行训练。模型复杂，计算资源消耗大。对模型结构和超参数选择敏感。
A062,循环神经网络,Recurrent Neural Network (RNN),机器学习,深度学习,训练O(序列长度 * 隐藏层大小 * 词汇量)，预测O(序列长度 * 隐藏层大小 * 词汇量),O(网络参数量),不适用,自然语言处理;语音识别;时间序列预测,循环神经网络是一种专门用于处理序列数据的神经网络。它具有“记忆”能力，能够将前一时刻的输出或隐藏状态作为当前时刻的输入，从而捕捉序列中的时间依赖关系。常见的变体有LSTM和GRU，用于解决梯度消失/爆炸问题。,人工智能;机器学习;自然语言处理;语音识别,优点：能够处理序列数据，捕捉时间依赖关系。在自然语言处理、语音识别等领域表现出色。缺点：存在梯度消失或梯度爆炸问题（尽管LSTM/GRU有所缓解）。训练速度慢，难以并行化。长期依赖问题仍然存在。
A063,长短期记忆网络,Long Short-Term Memory (LSTM),机器学习,深度学习,训练O(序列长度 * 隐藏层大小^2)，预测O(序列长度 * 隐藏层大小^2),O(网络参数量),不适用,机器翻译;语音识别;文本生成;情感分析,LSTM是RNN的一种特殊类型，旨在解决传统RNN的长期依赖问题和梯度消失/爆炸问题。它通过引入“门”结构（输入门、遗忘门、输出门）来控制信息的流动，从而能够有效地学习和记忆长期依赖关系。每个门都由一个Sigmoid激活函数和一个点乘操作组成。,人工智能;机器学习;自然语言处理;语音识别,优点：能够有效解决长期依赖问题，在处理长序列数据时表现优异。在自然语言处理、语音识别等领域广泛应用。缺点：模型结构比传统RNN更复杂，计算量更大，训练速度相对较慢。
A064,门控循环单元,Gated Recurrent Unit (GRU),机器学习,深度学习,训练O(序列长度 * 隐藏层大小^2)，预测O(序列长度 * 隐藏层大小^2),O(网络参数量),不适用,机器翻译;语音识别;文本生成;情感分析,GRU是LSTM的一种简化版本，也用于解决RNN的长期依赖问题。它只有两个门：更新门和重置门，相较于LSTM减少了一个门，参数更少，计算更高效。在许多任务中，GRU的表现与LSTM相当。,人工智能;机器学习;自然语言处理;语音识别,优点：与LSTM类似，能够有效解决长期依赖问题。模型结构比LSTM简单，参数更少，训练速度更快。缺点：在某些非常复杂的任务上，LSTM可能表现略优。
A065,Transformer模型,Transformer,机器学习,深度学习,训练O(序列长度^2 * 维度)，预测O(序列长度^2 * 维度),O(序列长度 * 维度),不适用,机器翻译;文本生成;自然语言理解;大语言模型,Transformer模型是一种基于自注意力机制（Self-Attention）的深度学习模型，完全抛弃了循环和卷积结构。它通过多头自注意力机制并行地处理序列中的所有位置，从而能够捕捉长距离依赖关系。编码器-解码器结构是其典型应用，也是BERT、GPT等大语言模型的基础。,人工智能;机器学习;自然语言处理;计算机视觉,优点：能够并行处理序列，训练速度快。在处理长距离依赖关系方面表现出色。是当前自然语言处理领域最先进的模型之一，是预训练大语言模型的基础。缺点：模型参数量巨大，需要大量计算资源和数据进行训练。对于短序列，可能不如RNN/CNN。
A066,遗传编程,Genetic Programming (GP),机器学习,进化算法,多变,多变,不适用,自动程序生成;符号回归;特征工程,遗传编程是遗传算法的一个分支，它不操作固定长度的二进制串，而是操作程序或表达式树。通过模拟自然选择和遗传操作（如交叉、变异），自动生成能够解决特定问题的计算机程序。适用于解决没有明确数学模型的复杂问题。,人工智能;机器学习;自动编程,优点：能够自动生成程序或模型，无需人工设计。适用于解决结构未知或复杂的优化问题。缺点：计算成本高昂，搜索空间巨大。结果的可解释性可能较差。
A067,Q-学习,Q-Learning,机器学习,强化学习,O(状态数 * 动作数),O(状态数 * 动作数),不适用,游戏AI;机器人控制;资源调度,Q-学习是一种无模型的强化学习算法，用于学习在给定状态下采取哪个动作可以获得最大累积奖励。它通过维护一个Q值表（Q-table），存储每个状态-动作对的Q值，然后通过贝尔曼方程迭代更新Q值，直到收敛。智能体通过探索和利用来学习最优策略。,人工智能;机器学习;强化学习;机器人学,优点：无模型学习，不需要知道环境的动态模型。能够学习最优策略。缺点：Q值表在状态空间和动作空间较大时会变得非常庞大，导致维度灾难。收敛速度可能较慢。
A068,SARSA算法,SARSA Algorithm,机器学习,强化学习,O(状态数 * 动作数),O(状态数 * 动作数),不适用,游戏AI;机器人控制,SARSA（State-Action-Reward-State-Action）是一种基于策略的强化学习算法。与Q-学习不同，SARSA是“on-policy”算法，它根据当前策略选择动作并更新Q值，即它学习的是当前策略下的Q值。Q-学习是“off-policy”，它学习的是最优策略下的Q值。,人工智能;机器学习;强化学习;机器人学,优点：基于当前策略进行学习，更注重探索，因此在某些情况下可能更安全（例如，避免探索危险路径）。缺点：与Q-学习一样，面临维度灾难问题。
A069,深度Q网络,Deep Q-Network (DQN),机器学习,强化学习;深度学习,训练O(迭代次数 * 经验回放池大小),O(神经网络参数量),不适用,Atari游戏AI;机器人控制,DQN结合了深度学习和Q-学习。它使用神经网络来近似Q值函数，从而解决了传统Q-学习在状态空间过大时的维度灾难问题。通过经验回放（Experience Replay）和目标网络（Target Network）来稳定训练过程。,人工智能;机器学习;强化学习;游戏AI,优点：能够处理高维状态空间，在Atari游戏等复杂任务中表现出色。结合了深度学习的强大特征提取能力。缺点：仍然存在一些不稳定性，如过估计Q值。对超参数敏感。
A070,策略梯度,Policy Gradient,机器学习,强化学习,O(迭代次数 * 样本数 * 特征数),O(神经网络参数量),不适用,机器人控制;复杂决策任务,策略梯度是一类直接学习策略（即在给定状态下采取动作的概率分布）的强化学习算法。它通过计算策略的梯度，然后利用梯度上升来最大化累积奖励。常见的算法有REINFORCE、Actor-Critic等。,人工智能;机器学习;强化学习;机器人学,优点：可以直接学习随机策略，适用于连续动作空间。能够处理更复杂的任务。缺点：方差较高，收敛速度较慢。需要大量的样本进行训练。
A071,A2C/A3C算法,A2C/A3C Algorithm,机器学习,强化学习;深度学习,O(迭代次数 * 样本数 * 特征数),O(神经网络参数量),不适用,机器人控制;复杂决策任务,A2C（Advantage Actor-Critic）和A3C（Asynchronous Advantage Actor-Critic）是Actor-Critic框架下的强化学习算法。Actor负责选择动作，Critic负责评估动作的价值。A3C通过异步并行训练多个Agent来加速学习过程并稳定训练。它们使用优势函数来减少方差。,人工智能;机器学习;强化学习;游戏AI,优点：结合了策略梯度和价值函数方法的优点，通常比纯策略梯度算法更稳定、收敛更快。A3C通过异步训练进一步提高了效率。缺点：实现相对复杂。对超参数敏感。
A072,生成对抗网络,Generative Adversarial Network (GAN),机器学习,深度学习,训练O(迭代次数 * 样本数 * 特征数),O(生成器+判别器参数量),不适用,图像生成;数据增强;风格迁移,GAN由两个神经网络组成：生成器（Generator）和判别器（Discriminator）。生成器试图生成逼真的数据（如图像），以欺骗判别器；判别器则试图区分真实数据和生成器生成的数据。两者通过对抗训练相互学习和进步，直到生成器能够生成判别器无法区分的逼真数据。,人工智能;机器学习;计算机视觉;图像生成,优点：能够生成高质量、逼真的数据，尤其在图像生成方面表现出色。具有强大的无监督学习能力。缺点：训练过程不稳定，容易出现模式崩溃（Mode Collapse）问题，即生成器只生成少数几种样本。对超参数敏感，难以收敛。
A073,自编码器,Autoencoder,机器学习,深度学习,训练O(迭代次数 * 样本数 * 特征数),O(网络参数量),不适用,降维;特征学习;异常检测;去噪,自编码器是一种无监督神经网络，旨在学习输入数据的有效编码（表示）。它由两部分组成：编码器（Encoder）将输入数据压缩成低维表示，解码器（Decoder）将低维表示重构回原始数据。训练目标是使重构误差最小化。,人工智能;机器学习;深度学习;数据降维,优点：能够学习数据的低维表示，用于降维和特征提取。可用于异常检测和数据去噪。缺点：对于复杂数据，可能需要更复杂的结构（如变分自编码器VSAE）。重构误差不一定能反映数据本身的语义信息。
A074,变分自编码器,Variational Autoencoder (VAE),机器学习,深度学习,训练O(迭代次数 * 样本数 * 特征数),O(网络参数量),不适用,图像生成;数据增强;潜在空间学习,VAE是自编码器的一种扩展，它引入了概率图模型和变分推断的思想。VAE的编码器不是直接输出一个编码，而是输出一个均值和方差，用于定义一个潜在空间的概率分布。解码器从这个分布中采样并生成数据。它能够学习平滑的、连续的潜在空间，并支持生成新的数据。,人工智能;机器学习;深度学习;图像生成,优点：能够生成新的、多样化的数据。学习到的潜在空间具有良好的连续性和可解释性。解决了GAN训练不稳定的问题。缺点：生成的样本质量通常不如GAN。模型训练和理论理解相对复杂。
A075,循环一致性对抗网络,CycleGAN,机器学习,深度学习,训练O(迭代次数 * 样本数 * 特征数),O(多个生成器+判别器参数量),不适用,图像风格迁移;无监督图像翻译,CycleGAN是一种图像到图像翻译的深度学习模型，特别适用于没有成对训练数据的情况。它引入了循环一致性损失，确保从域A到域B再回到域A的转换能够恢复原始图像，从而在无监督情况下实现图像风格迁移。,人工智能;机器学习;计算机视觉;图像处理,优点：能够在没有成对训练数据的情况下进行图像翻译和风格迁移，应用广泛。缺点：训练复杂，需要多个生成器和判别器。模型收敛可能较慢，生成结果有时存在伪影。
A098,PageRank算法,PageRank Algorithm,图算法,链接分析,O(迭代次数 * 边数),O(节点数),不适用,网页排名;社交网络影响力分析;学术引用分析,PageRank算法是Google搜索引擎的核心算法之一，用于评估网页的重要性。它基于“一个网页的重要性取决于指向它的其他网页的重要性”这一思想。算法通过迭代计算每个网页的PageRank值，直到收敛。它模拟了用户随机漫步的行为。,计算机科学;图论;信息检索;网络科学,优点：能够客观评估网页或节点的重要性。在搜索引擎、推荐系统等领域有广泛应用。缺点：算法收敛速度可能较慢。容易受到链接作弊的影响。不考虑链接的语义信息。
A099,HITS算法,HITS Algorithm,图算法,链接分析,O(迭代次数 * 边数),O(节点数),不适用,网页排名;社交网络影响力分析,HITS（Hyperlink-Induced Topic Search）算法用于评估网页的权威性（Authority）和中心性（Hub）。权威页面是包含有用信息的页面，中心页面是指向许多权威页面的页面。算法通过迭代计算每个网页的Authority值和Hub值，直到收敛。与PageRank不同，HITS是基于查询的。,计算机科学;图论;信息检索;网络科学,优点：能够区分网页的权威性和中心性，提供更丰富的评价信息。缺点：计算成本相对较高。容易受到链接作弊的影响。
A102,维特比算法,Viterbi Algorithm,动态规划,序列解码,O(序列长度 * 状态数^2),O(序列长度 * 状态数),不适用,隐马尔可夫模型解码;语音识别;自然语言处理,维特比算法是一种动态规划算法，用于在隐马尔可夫模型（HMM）中找到给定观测序列下最可能的状态序列。它通过构建一个格（Lattice）图，并利用动态规划的思想，在每一步计算到达每个状态的最大概率路径，从而高效地找到全局最优路径。,计算机科学;动态规划;语音识别;自然语言处理,优点：能够高效地找到HMM中最优的状态序列。在语音识别、自然语言处理等领域有核心应用。缺点：计算复杂度与状态数平方成正比，当状态数非常大时效率降低。
A103,前向-后向算法,Forward-Backward Algorithm,动态规划,概率计算,O(序列长度 * 状态数^2),O(序列长度 * 状态数),不适用,隐马尔可夫模型评估;参数估计,前向-后向算法是隐马尔可夫模型（HMM）中的一种动态规划算法，用于计算给定观测序列的概率（评估问题），以及计算隐状态的后验概率。它由前向算法和后向算法两部分组成，分别从前往后和从后往前计算概率。,计算机科学;动态规划;语音识别;自然语言处理,优点：能够高效地计算HMM的观测序列概率，是HMM参数学习（Baum-Welch算法）的基础。缺点：计算复杂度与状态数平方成正比。
A106,马尔可夫链蒙特卡罗,Markov Chain Monte Carlo (MCMC),统计学,采样方法,多变,多变,不适用,贝叶斯推断;复杂概率分布采样;统计物理模拟,MCMC是一类用于从复杂概率分布中采样的算法。它通过构建一个马尔可夫链，使其平稳分布是目标分布，然后从该马尔可夫链中进行采样。常见的MCMC算法包括Metropolis-Hastings算法和Gibbs采样。,统计学;机器学习;贝叶斯推断;物理学,优点：能够从高维、复杂的概率分布中进行采样，尤其适用于贝叶斯推断。缺点：收敛速度可能较慢，需要大量的样本。需要判断马尔可夫链是否收敛。
A107,Metropolis-Hastings算法,Metropolis-Hastings Algorithm,统计学,采样方法,多变,多变,不适用,贝叶斯推断;复杂概率分布采样,Metropolis-Hastings算法是一种MCMC方法，用于从难以直接采样的概率分布中生成样本。它通过一个提议分布（Proposal Distribution）生成候选样本，然后根据接受概率决定是否接受该样本。接受概率的设计确保了马尔可夫链的平稳分布是目标分布。,统计学;机器学习;贝叶斯推断,优点：能够从各种复杂分布中采样，无需知道归一化常数。缺点：需要选择合适的提议分布。收敛速度可能较慢。
A108,Gibbs采样,Gibbs Sampling,统计学,采样方法,多变,多变,不适用,贝叶斯推断;图像去噪;主题模型,Gibbs采样是MCMC方法的一种特例，适用于多维联合分布的采样。它通过依次从每个变量以其他所有变量为条件的条件分布中进行采样，从而生成联合分布的样本。当条件分布易于采样时，Gibbs采样非常高效。,统计学;机器学习;贝叶斯推断;图像处理,优点：当条件分布易于采样时，实现简单且高效。在许多统计模型中应用广泛。缺点：需要知道所有变量的条件分布。如果变量之间高度相关，收敛速度可能较慢。
A110,Singular Value Decomposition (SVD),SVD,线性代数,矩阵分解;降维,O(min(m，n)^2 * max(m，n)),O(mn),不适用,推荐系统;图像压缩;降维;文本语义分析,SVD是一种重要的矩阵分解方法，它将任意矩阵分解为三个矩阵的乘积：一个正交矩阵U，一个对角矩阵Sigma（包含奇异值），和一个正交矩阵V的转置。奇异值分解可以用于降维、去噪、推荐系统等。,计算机科学;线性代数;机器学习;数据分析,优点：具有广泛的应用，能够揭示数据中的潜在结构。是许多数据分析和机器学习算法的基础。缺点：计算成本高，不适用于非常大的矩阵。结果的可解释性可能不如PCA直观。
A113,傅里叶变换,Fourier Transform,信号处理,变换,O(N log N),O(N),不适用,信号分析;图像处理;数据压缩;频谱分析,傅里叶变换是一种将信号从时域（或空域）转换到频域的数学方法。它将一个函数分解成不同频率的正弦和余弦函数的叠加。快速傅里叶变换（FFT）是其高效的实现算法。核心思想是任何周期信号都可以表示为一系列正弦波的叠加。,计算机科学;信号处理;图像处理;物理学,优点：能够揭示信号的频率成分，用于频谱分析、滤波、压缩等。FFT使其计算效率高。缺点：仅适用于平稳信号，对于非平稳信号（如瞬时频率变化）效果不佳。
A114,快速傅里叶变换,Fast Fourier Transform (FFT),信号处理,变换,O(N log N),O(N),不适用,信号分析;图像处理;数据压缩;频谱分析,FFT是离散傅里叶变换（DFT）的一种高效算法，将DFT的计算复杂度从O(N^2)降低到O(N log N)。它利用了DFT计算中的对称性和周期性，将一个N点DFT分解为两个N/2点DFT，然后递归地进行。是数字信号处理领域的基石。,计算机科学;信号处理;图像处理;物理学,优点：计算效率极高，使得傅里叶变换在实际应用中成为可能。广泛应用于信号处理、图像处理、数据压缩等领域。缺点：要求数据点数量是2的幂次方（对于某些FFT算法）。
A115,小波变换,Wavelet Transform,信号处理,变换,O(N),O(N),不适用,信号分析;图像压缩;去噪;特征提取,小波变换是一种在时域和频域同时具有局部化能力的信号分析方法。与傅里叶变换将信号分解为无限长的正弦波不同，小波变换使用有限长、快速衰减的“小波”函数来分析信号。它能够捕捉信号的瞬时特征和局部细节。,计算机科学;信号处理;图像处理;数据压缩,优点：具有多分辨率分析能力，能够同时分析信号的时域和频域信息。适用于非平稳信号的分析。在图像压缩、去噪、特征提取等领域表现出色。缺点：小波基函数的选择对性能有影响。计算量相对较大。
A116,动态时间规整,Dynamic Time Warping (DTW),序列比对,相似度度量,O(mn),O(mn),不适用,语音识别;手势识别;时间序列比对,DTW是一种用于衡量两个时间序列之间相似度的方法，即使它们在时间轴上存在非线性扭曲或速度变化。它通过找到一个最优的“弯曲路径”，使得两个序列在时间上对齐，并最小化对齐后的距离。常用于语音识别中不同语速下的词语匹配。,计算机科学;信号处理;语音识别;模式识别,优点：能够处理时间序列的非线性扭曲，比欧氏距离更准确地衡量相似度。缺点：计算成本高，时间复杂度为O(mn)，不适用于非常长的时间序列。对异常值敏感。
A117,欧几里得算法,Euclidean Algorithm,数学,数论,O(log(min(a，b))),O(1),不适用,最大公约数计算;密码学,欧几里得算法（又称辗转相除法）用于计算两个正整数的最大公约数（GCD）。其核心思想是两个正整数a和b（a > b）的最大公约数等于b和a除以b的余数的最大公约数。通过递归或迭代地进行此操作，直到余数为0，此时的除数即为最大公约数。,计算机科学;数学;密码学,优点：算法简单，高效，是计算最大公约数的标准方法。缺点：仅适用于正整数。
A118,扩展欧几里得算法,Extended Euclidean Algorithm,数学,数论,O(log(min(a，b))),O(1),不适用,模逆元计算;线性同余方程求解;密码学,扩展欧几里得算法在计算两个整数a和b的最大公约数GCD(a，b)的同时，还能找到一对整数x和y，使得$ax + by = GCD(a，b)$。它是求解模逆元和线性同余方程的基础。,计算机科学;数学;密码学,优点：能够求解模逆元和线性同余方程，在密码学中（如RSA算法）有重要应用。缺点：理解和实现相对复杂。
A119,中国剩余定理,Chinese Remainder Theorem (CRT),数学,数论,O(k * log(N)),O(k),不适用,大整数计算;密码学;同余方程组求解,中国剩余定理用于解决一组同余方程组。它提供了一种方法，可以从多个模数下的大整数的余数，重构出这个大整数。前提是所有模数两两互质。,计算机科学;数学;密码学,优点：能够将大整数的计算分解为多个小整数的计算，从而简化问题。在密码学、编码理论等领域有重要应用。缺点：要求模数两两互质。
A120,素性测试,Primality Test,数学,数论,多变,多变,不适用,大素数生成;密码学,素性测试是判断一个给定正整数是否为素数（质数）的算法。常见的有试除法、费马素性测试、米勒-拉宾素性测试等。在密码学中，需要生成大素数作为密钥。,计算机科学;数学;密码学,优点：能够判断一个数是否为素数，是密码学的基础。缺点：对于大数，确定性素性测试算法效率较低。概率性素性测试（如米勒-拉宾）有误判的概率（尽管很小）。
A121,Miller-Rabin素性测试,Miller-Rabin Primality Test,数学,数论,O(k * log^3 n),O(log n),不适用,大素数测试;密码学,Miller-Rabin算法是一种概率性素性测试算法，用于判断一个大整数是否为素数。它基于费马小定理和二次探测定理，通过随机选择基数进行多次测试。如果通过所有测试，则该数很可能是素数；如果未通过任何测试，则它一定是合数。,计算机科学;数学;密码学,优点：对于大整数，效率远高于确定性素性测试。在实际应用中，通过少量迭代即可达到非常高的准确率。缺点：是概率性算法，存在极小的误判概率（将合数判断为素数）。
A122,RSA算法,RSA Algorithm,密码学,公钥加密,加密/解密O(log^3 N)，密钥生成O(log^4 N),O(log N),不适用,数据加密;数字签名;密钥交换,RSA是一种非对称加密算法，也是第一个能用于数据加密和数字签名的算法。它基于大整数分解的困难性。包含密钥生成（选择两个大素数）、加密（使用公钥）和解密（使用私钥）三个过程。,计算机科学;密码学;网络安全,优点：安全性高，广泛应用于数据加密和数字签名。是现代密码学的基础之一。缺点：计算速度相对较慢，不适合加密大量数据。密钥长度需要足够大以保证安全性。
A123,AES算法,Advanced Encryption Standard (AES),密码学,对称加密,O(数据块大小 * 轮数),O(密钥长度),不适用,数据加密;文件加密;网络通信加密,AES是一种对称密钥加密算法，是目前最常用的加密算法之一。它使用相同的密钥进行加密和解密。AES支持128、192和256位的密钥长度，采用分组密码模式，将明文分成固定大小的块进行加密。,计算机科学;密码学;网络安全,优点：加密速度快，效率高，安全性强。被广泛应用于各种加密场景。缺点：需要安全地分发密钥，密钥管理是挑战。
A124,MD5,Message-Digest Algorithm 5 (MD5),密码学,哈希函数,O(消息长度),O(1),不适用,数据完整性校验;文件校验;密码存储(不推荐),MD5是一种广泛使用的密码散列函数，可以生成一个128位的哈希值（或消息摘要）。它将任意长度的输入数据映射为固定长度的输出。虽然曾用于数据完整性校验，但由于存在碰撞攻击，已不推荐用于安全性要求高的场景。,计算机科学;密码学;数据完整性,优点：计算速度快，生成固定长度的哈希值。缺点：存在碰撞攻击（不同输入可能产生相同哈希值），不适合用于数字签名或密码存储（应使用更安全的哈希算法）。
A125,SHA-256,Secure Hash Algorithm 256 (SHA-256),密码学,哈希函数,O(消息长度),O(1),不适用,数据完整性校验;数字签名;区块链;密码存储,SHA-256是SHA-2家族中的一种密码散列函数，可以生成一个256位的哈希值。它比MD5更安全，广泛应用于数字签名、SSL/TLS、区块链等领域。,计算机科学;密码学;网络安全;区块链,优点：安全性高，目前尚未发现有效的碰撞攻击。广泛应用于各种安全场景。缺点：计算速度相对较慢。
A126,DH密钥交换,Diffie-Hellman Key Exchange,密码学,密钥交换,O(log^3 N),O(log N),不适用,安全通信;密钥协商,Diffie-Hellman密钥交换是一种在不安全的信道上安全地交换加密密钥的方法。它允许通信双方在不共享任何秘密信息的情况下，协商出一个共享的秘密密钥。基于离散对数问题的困难性。,计算机科学;密码学;网络安全,优点：能够在不安全的信道上建立共享密钥，是许多安全协议（如SSL/TLS）的基础。缺点：容易受到中间人攻击，需要额外的认证机制来防止。
A127,椭圆曲线密码学,Elliptic Curve Cryptography (ECC),密码学,公钥加密,加密/解密O(曲线参数)，密钥生成O(曲线参数),O(曲线参数),不适用,数据加密;数字签名;密钥交换,ECC是一种基于椭圆曲线数学的公钥密码学方法。与RSA相比，ECC在相同安全强度下所需的密钥长度更短，因此计算效率更高，更适合资源受限的环境（如移动设备）。,计算机科学;密码学;网络安全,优点：在相同安全级别下，密钥长度比RSA短得多，因此计算速度更快，存储空间更小。适用于资源受限的设备。缺点：数学理论复杂，实现难度高。
A128,数字签名算法,Digital Signature Algorithm (DSA),密码学,数字签名,签名O(log^3 N)，验证O(log^3 N),O(log N),不适用,数据完整性;身份认证;不可否认性,DSA是一种用于生成和验证数字签名的算法。它允许消息的发送者对其消息进行签名，以证明消息的来源和完整性，并提供不可否认性。基于离散对数问题的困难性。,计算机科学;密码学;网络安全,优点：能够提供数据完整性、身份认证和不可否认性。缺点：仅用于数字签名，不能用于数据加密。
A129,哈希表,Hash Table,数据结构,查找;存储,平均O(1)，最坏O(n),O(n),不适用,快速查找;缓存;数据库索引;符号表,哈希表（或散列表）是一种通过哈希函数将键映射到数组索引来存储和检索数据的数据结构。它提供了平均O(1)的查找、插入和删除操作。通过处理哈希冲突（如链地址法、开放寻址法）来应对多个键映射到同一索引的情况。,计算机科学;数据结构;数据库;操作系统,优点：平均查找、插入和删除操作时间复杂度为O(1)，效率极高。缺点：最坏情况下可能退化到O(n)（所有元素哈希到同一位置）。需要选择合适的哈希函数和冲突解决策略。哈希表的大小对性能有影响。
A130,二叉搜索树,Binary Search Tree (BST),数据结构,查找;存储,平均O(log n)，最坏O(n),平均O(log n)，最坏O(n),不适用,动态数据查找;排序;字典实现,二叉搜索树是一种特殊的二叉树，其中每个节点的左子树只包含小于当前节点的值，右子树只包含大于当前节点的值。这使得查找、插入和删除操作的平均时间复杂度为O(log n)。,计算机科学;数据结构;数据库,优点：支持高效的查找、插入和删除操作。可以进行范围查询。缺点：在最坏情况下（如插入有序序列），树可能退化为链表，导致操作时间复杂度变为O(n)。需要平衡化（如AVL树、红黑树）来保证性能。
A131,AVL树,AVL Tree,数据结构,查找;存储,O(log n),O(log n),不适用,动态数据查找;数据库索引,AVL树是一种自平衡二叉搜索树。它通过在每次插入或删除操作后检查并调整节点的平衡因子（左右子树高度差的绝对值不超过1），确保树的高度差不超过1，从而保证树的高度始终为O(log n)，进而保证所有操作的时间复杂度为O(log n)。,计算机科学;数据结构;数据库,优点：所有操作（查找、插入、删除）的时间复杂度均为O(log n)，性能稳定。缺点：实现相对复杂，需要进行旋转操作来维护平衡。
A132,红黑树,Red-Black Tree,数据结构,查找;存储,O(log n),O(log n),不适用,动态数据查找;Map/Set实现;Linux内核调度,红黑树是一种自平衡二叉搜索树，它通过为每个节点着色（红色或黑色）并遵循一系列规则来保持树的平衡。它不追求严格的平衡，而是保证从根到叶子的最长路径不超过最短路径的两倍，从而保证操作的对数时间复杂度。,计算机科学;数据结构;操作系统;数据库,优点：所有操作（查找、插入、删除）的时间复杂度均为O(log n)，性能稳定。实现相对AVL树更宽松，旋转次数通常更少。广泛应用于标准库和操作系统内核。缺点：实现比普通二叉搜索树复杂。
A133,B树,B-Tree,数据结构,查找;存储,O(log N),O(N),不适用,数据库索引;文件系统,B树是一种多路平衡查找树，广泛应用于数据库和文件系统。它允许一个节点包含多个子节点，并且所有叶子节点都位于同一层。B树的特点是节点中的键值和子节点指针数量可以动态变化，以适应磁盘IO的特性，减少磁盘访问次数。,计算机科学;数据结构;数据库;文件系统,优点：非常适合磁盘等外部存储，能够显著减少磁盘IO次数，提高查询效率。所有操作的时间复杂度均为O(log N)。缺点：实现比二叉树复杂。
A134,B+树,B+ Tree,数据结构,查找;存储,O(log N),O(N),不适用,数据库索引;文件系统,B+树是B树的一种变体，在数据库和文件系统中更为常用。它的主要特点是所有数据都存储在叶子节点中，并且叶子节点之间通过链表连接。非叶子节点只存储键值和子节点指针，用于索引。这使得范围查询更加高效。,计算机科学;数据结构;数据库;文件系统,优点：所有数据都在叶子节点，有利于范围查询和全表扫描。磁盘IO效率高。缺点：实现比B树更复杂。
A135,Trie树,Trie (Prefix Tree),数据结构,查找;存储,O(L) (L为字符串长度),O(N*L) (N为字符串数量),不适用,字符串查找;前缀匹配;自动补全;拼写检查,Trie树（或前缀树、字典树）是一种用于高效存储和检索字符串集合的树形数据结构。每个节点代表一个字符，从根到某个节点的路径表示一个字符串。它通过共享前缀来节省空间，并支持快速的前缀查找。,计算机科学;数据结构;字符串处理;搜索引擎,优点：支持高效的前缀查找和匹配。空间效率高（当有大量共同前缀时）。缺点：如果字符串集合中没有太多共同前缀，空间效率可能不高。
A136,并查集,Disjoint Set Union (DSU),数据结构,集合操作,平均O(α(n)),O(n),不适用,连通分量;最小生成树(Kruskal);网络连通性,并查集是一种用于管理元素分组的数据结构，支持两种主要操作：查找（Find），确定元素所属的集合；合并（Union），将两个集合合并为一个。通过路径压缩和按秩合并（或按大小合并）等优化，操作的平均时间复杂度接近常数。,计算机科学;数据结构;图论;算法竞赛,优点：能够高效地进行集合的合并与查找操作。实现相对简单。缺点：无法支持删除操作。
A137,线段树,Segment Tree,数据结构,区间查询;区间修改,O(log n),O(n),不适用,区间求和;区间最值;区间更新,线段树是一种二叉树数据结构，用于高效地处理区间（或线段）上的查询和修改操作。每个节点代表一个区间，叶子节点代表最小的单元区间。非叶子节点存储其子节点区间的聚合信息。支持单点更新和区间更新，以及区间查询。,计算机科学;数据结构;算法竞赛,优点：能够高效地处理各种区间查询和修改操作，时间复杂度为O(log n)。缺点：实现相对复杂。空间复杂度为O(n)。
A138,树状数组,Fenwick Tree (BIT),数据结构,前缀和;单点修改,O(log n),O(n),不适用,前缀和查询;单点更新;逆序对计数,树状数组（或二叉索引树）是一种数据结构，用于高效地计算数组的前缀和以及进行单点更新。它利用二进制表示来快速定位需要更新或查询的区间。与线段树相比，实现更简单，常数因子更小。,计算机科学;数据结构;算法竞赛,优点：实现简单，常数因子小，效率高。支持单点更新和前缀和查询，时间复杂度均为O(log n)。缺点：功能不如线段树强大，只能处理前缀和相关的问题。
A139,跳表,Skip List,数据结构,查找;存储,平均O(log n)，最坏O(n),平均O(n)，最坏O(n),不适用,动态数据查找;数据库索引;缓存,跳表是一种基于并行链表的概率性数据结构，用于实现有序集合或映射。它通过在多层链表中随机跳跃来加速查找操作。每一层链表都是下一层链表的子序列，且元素有序。通过随机决定每个元素在多少层中出现，从而实现对数级的查找效率。,计算机科学;数据结构;数据库;缓存,优点：实现比平衡二叉搜索树简单。平均查找、插入和删除操作时间复杂度为O(log n)。支持范围查询。缺点：最坏情况下可能退化到O(n)。空间复杂度相对较高。
A140,布隆过滤器,Bloom Filter,数据结构,集合成员测试,O(k),O(m),不适用,快速判断元素是否存在;缓存穿透;垃圾邮件过滤,布隆过滤器是一种空间效率高、但有一定误判率的概率型数据结构，用于判断一个元素是否在一个集合中。它通过多个哈希函数将元素映射到位数组中的多个位置，并将这些位置置为1。查询时，如果所有对应的位置都为1，则元素可能存在；如果有任何一个位置为0，则元素一定不存在。存在误判，但不会漏判。,计算机科学;数据结构;大数据;缓存,优点：空间效率极高，比哈希表节省大量空间。查询速度快。缺点：存在误判率（将不存在的元素判断为存在）。不支持删除操作。
A141,LRU缓存淘汰算法,Least Recently Used (LRU),缓存算法,缓存管理,O(1),O(容量),不适用,缓存管理;内存管理,LRU算法是一种常用的缓存淘汰策略。当缓存空间不足时，它会淘汰最近最少使用的数据。通常使用双向链表和哈希表的组合来实现：哈希表用于快速查找，双向链表用于维护访问顺序，最近访问的元素移到链表头部，最久未使用的元素在链表尾部。,计算机科学;操作系统;数据库;网络,优点：能够有效利用缓存空间，提高缓存命中率。缺点：需要维护访问顺序，实现相对复杂。无法处理未来访问模式。
A142,LFI缓存淘汰算法,Least Frequently Used (LFU),缓存算法,缓存管理,O(log N) 或 O(1),O(容量),不适用,缓存管理;内存管理,LFU算法是一种缓存淘汰策略，当缓存空间不足时，它会淘汰访问频率最低的数据。通常使用哈希表和最小堆（或频率链表）来实现：哈希表用于快速查找，最小堆用于维护访问频率，频率最低的元素在堆顶。,计算机科学;操作系统;数据库;网络,优点：能够淘汰真正不常用的数据，可能比LRU更有效。缺点：实现比LRU复杂。无法处理访问频率随时间变化的情况（如某个数据在短时间内访问频繁，但之后不再访问）。
A143,Aho-Corasick算法,Aho-Corasick Algorithm,字符串,多模式匹配,O(N+M+K) (K为匹配次数),O(M),不适用,多模式匹配;敏感词过滤;病毒扫描,Aho-Corasick算法是一种用于在文本中查找多个模式串的高效算法。它通过构建一个有限状态自动机（Trie树结合失败指针）来同时匹配所有模式串。当文本扫描到一个字符时，自动机根据当前状态和输入字符进行状态转移，并报告匹配到的模式串。,计算机科学;字符串处理;信息安全,优点：能够在线性时间内同时查找多个模式串，效率高。广泛应用于敏感词过滤、病毒扫描等。缺点：算法实现相对复杂。
A144,后缀数组,Suffix Array,字符串,字符串分析,O(N log N),O(N),不适用,字符串匹配;最长公共前缀;基因组分析,后缀数组是一个字符串所有后缀经过排序后得到的起始位置的数组。它是一种重要的字符串数据结构，可以用于解决许多字符串问题，如字符串匹配、最长公共前缀（LCP）数组的构建、重复子串查找等。,计算机科学;字符串处理;生物信息学,优点：能够高效地解决多种字符串问题。缺点：构建算法相对复杂。
A145,后缀树,Suffix Tree,字符串,字符串分析,O(N),O(N),不适用,字符串匹配;最长公共子串;基因组分析,后缀树是一个字符串所有后缀的压缩Trie树。它是一种非常强大的字符串数据结构，可以在线性时间内构建，并用于解决各种复杂的字符串问题，如最长重复子串、最长公共子串、最短唯一子串等。,计算机科学;字符串处理;生物信息学,优点：能够在线性时间内解决许多复杂的字符串问题。缺点：构建算法非常复杂，实现难度大。空间消耗相对较大。
A146,Z-Algorithm (字符串),Z-Algorithm,字符串,模式匹配,O(N+M),O(N+M),不适用,字符串匹配;模式匹配;LCP数组构建,Z算法（也称为Z-box算法）用于计算一个字符串S的Z数组。Z数组$Z[i]$表示S和S的后缀$S[i..]$的最长公共前缀的长度。通过计算Z数组，可以高效地进行字符串匹配。核心思想是利用已经计算的Z值，避免重复比较，实现线性时间复杂度。,计算机科学;字符串处理;文本分析,优点：时间复杂度为O(N+M)，是线性时间算法，非常高效。可以用于解决字符串匹配问题，比KMP更易于理解和实现。缺点：相对KMP，其应用场景可能更专注于LCP（最长公共前缀）的计算，但同样可以解决模式匹配。
A147,高斯消元法,Gaussian Elimination,线性代数,方程求解,O(n^3),O(n^2),不适用,线性方程组求解;矩阵求逆;行列式计算,高斯消元法是一种用于求解线性方程组的算法。它通过一系列行变换（交换两行、某行乘以非零常数、某行加上另一行的倍数）将增广矩阵化为行阶梯形或简化行阶梯形，从而得到方程组的解。也可用于计算矩阵的逆和行列式。,计算机科学;数学;数值计算,优点：能够求解任意线性方程组。算法思想直观，易于理解。缺点：时间复杂度为O(n^3)，对于大规模方程组效率较低。对浮点数计算可能存在精度问题。
A148,LU分解,LU Decomposition,线性代数,矩阵分解,O(n^3),O(n^2),不适用,线性方程组求解;矩阵求逆;行列式计算,LU分解将一个方阵A分解为一个下三角矩阵L和一个上三角矩阵U的乘积，即$A = LU$。通过LU分解，可以更高效地求解多个具有相同系数矩阵的线性方程组，以及计算矩阵的逆和行列式。,计算机科学;数学;数值计算,优点：一旦完成分解，求解线性方程组、计算逆矩阵等操作会更快。缺点：计算成本高，时间复杂度为O(n^3)。并非所有矩阵都存在LU分解，需要进行行交换（PLU分解）。
A149,QR分解,QR Decomposition,线性代数,矩阵分解,O(mn^2),O(mn),不适用,最小二乘问题;特征值计算,QR分解将一个矩阵A分解为一个正交矩阵Q和一个上三角矩阵R的乘积，即$A = QR$。它常用于求解线性最小二乘问题和计算矩阵的特征值。常用的方法有Householder变换和Givens旋转。,计算机科学;数学;数值计算,优点：在数值稳定性方面优于LU分解。广泛应用于最小二乘问题和特征值计算。缺点：计算成本高。
A150,遗传算法优化,Genetic Algorithm Optimization,优化算法,启发式搜索;仿生算法,多变,多变,不适用,组合优化;机器学习参数优化;工程设计,遗传算法是一种模拟自然选择和遗传机制的全局优化算法。它通过模拟生物进化过程中的选择、交叉和变异等操作，迭代地改进解的种群，最终收敛到最优解或近似最优解。适用于解决复杂的优化问题。,计算机科学;人工智能;机器学习;运筹学,优点：能够处理复杂的、非线性的、多模态的优化问题，不依赖于梯度信息。具有全局搜索能力，可以避免陷入局部最优。缺点：收敛速度可能较慢。参数选择（种群大小、交叉率、变异率等）对性能影响大，需要经验调整。不保证找到全局最优解，通常是近似最优解。
A151,模拟退火优化,Simulated Annealing Optimization,优化算法,启发式搜索,多变,多变,不适用,组合优化;VLSI设计;图像处理,模拟退火算法是一种基于物理退火过程的启发式搜索算法，用于解决组合优化问题。它从一个随机初始解开始，通过随机扰动生成新解。与贪心算法不同，它以一定的概率接受较差的解，从而跳出局部最优，随着“温度”的降低，接受较差解的概率逐渐减小，最终收敛到全局最优解或近似最优解。,计算机科学;人工智能;机器学习;运筹学,优点：能够跳出局部最优，具有全局搜索能力。适用于解决复杂的组合优化问题，不依赖于梯度信息。缺点：收敛速度可能较慢。参数（初始温度、降温速率、迭代次数等）的选择对性能影响大，需要经验调整。不保证找到全局最优解。
A152,蚁群优化,Ant Colony Optimization,优化算法,启发式搜索;仿生算法,多变,多变,不适用,旅行商问题;路径规划;网络路由,蚁群算法是一种模拟蚂蚁觅食行为的启发式优化算法。蚂蚁在寻找食物时会释放信息素，其他蚂蚁会倾向于沿着信息素浓度高的路径前进。算法通过模拟信息素的积累和挥发过程，最终找到最优路径。适用于解决组合优化问题。,计算机科学;人工智能;机器学习;运筹学,优点：具有分布式计算的特点，鲁棒性强，能够处理动态问题。适用于解决旅行商问题等复杂的组合优化问题。缺点：收敛速度可能较慢。参数选择（信息素挥发率、信息素增加量等）对性能影响大。
A191,人工蜂群算法,Artificial Bee Colony (ABC),优化算法,启发式搜索;仿生算法,多变,多变,不适用,函数优化;组合优化,人工蜂群算法是一种模拟蜜蜂采蜜行为的启发式优化算法。它将蜜蜂群分为三种角色：雇佣蜂、观察蜂和侦察蜂，通过模拟这些蜜蜂的采蜜过程来寻找最优解。适用于解决连续和组合优化问题。,计算机科学;人工智能;机器学习;优化,优点：算法简单，易于实现。具有较强的全局搜索能力。缺点：收敛速度可能较慢。
A192,细菌觅食优化,Bacterial Foraging Optimization (BFO),优化算法,启发式搜索;仿生算法,多变,多变,不适用,函数优化;组合优化,细菌觅食优化算法是一种模拟大肠杆菌觅食行为的启发式优化算法。它通过模拟细菌的趋化性（Chemotaxis）、繁殖（Reproduction）和迁徙（Elimination-Dispersal）等行为来寻找最优解。适用于解决非线性、非连续、不可微的优化问题。,计算机科学;人工智能;机器学习;优化,优点：具有较强的全局搜索能力。适用于解决复杂的非线性优化问题。缺点：算法相对复杂，参数较多。
A193,和声搜索,Harmony Search (HS),优化算法,启发式搜索;仿生算法,多变,多变,不适用,函数优化;组合优化,和声搜索算法是一种模拟音乐家即兴创作过程的启发式优化算法。它通过模拟音乐家在演奏时调整音高来寻找最佳和声，从而在搜索空间中寻找最优解。适用于解决连续和组合优化问题。,计算机科学;人工智能;机器学习;优化,优点：算法简单，易于实现。参数较少。缺点：收敛速度可能较慢。
A194,灰狼优化,Grey Wolf Optimizer (GWO),优化算法,启发式搜索;仿生算法,多变,多变,不适用,函数优化;组合优化,灰狼优化算法是一种模拟灰狼捕食行为的启发式优化算法。它模拟了灰狼的社会等级制度和捕食过程（搜索、包围、攻击猎物）来寻找最优解。适用于解决连续和组合优化问题。,计算机科学;人工智能;机器学习;优化,优点：算法简单，易于实现。收敛速度相对较快。缺点：容易陷入局部最优。
A195,鲸鱼优化算法,Whale Optimization Algorithm (WOA),优化算法,启发式搜索;仿生算法,多变,多变,不适用,函数优化;组合优化,鲸鱼优化算法是一种模拟座头鲸捕食行为的启发式优化算法。它模拟了座头鲸的“气泡网捕食策略”，包括包围猎物、气泡网攻击和搜索猎物三个阶段来寻找最优解。适用于解决连续和组合优化问题。,计算机科学;人工智能;机器学习;优化,优点：算法简单，易于实现。收敛速度相对较快。缺点：容易陷入局部最优。
A196,群智能算法,Swarm Intelligence Algorithms,优化算法,启发式搜索;仿生算法,多变,多变,不适用,组合优化;函数优化,群智能算法是一类模拟自然界中生物群体行为（如鸟群、鱼群、蚁群等）的启发式优化算法。它们通过个体之间的简单交互和信息共享，涌现出解决复杂问题的集体智能。包括粒子群优化、蚁群算法、蜂群算法等。,计算机科学;人工智能;机器学习;优化,优点：具有全局搜索能力，能够避免陷入局部最优。鲁棒性强，适用于解决复杂的优化问题。缺点：收敛速度可能较慢。参数选择对性能影响大。
A197,希尔排序,Shell Sort,排序,比较排序,O(n^(3/2))~O(n^2),O(1),不稳定,中等规模数据排序,基于插入排序的改进算法，通过定义增量序列将数据分组进行插入排序，逐步缩小增量直至为1。通过跨步交换缩短元素移动距离。,计算机科学;软件工程,优点：比简单插入排序效率更高，适用于中等规模数据集。缺点：增量序列的选择会影响性能，最坏情况下时间复杂度接近O(n^2)。
A198,插值查找,Interpolation Search,搜索,分治搜索,O(log log n)(均匀分布),O(1),不适用,有序数据查找,改进的二分查找，通过线性插值预测目标值位置，非均匀分布时退化为二分查找。,计算机科学;数据库查询,优点：数据均匀时速度优于二分查找，无需额外空间。缺点：对非均匀分布数据效率下降。
A199,Floyd判圈算法,Floyd's Cycle-Finding Algorithm,图算法,双指针技术,O(n),O(1),不适用,链表环检测;周期计算,使用快慢指针检测序列循环，快指针速度是慢指针的两倍。相遇证明存在环，通过重置慢指针确定环入口。,计算机科学;密码学;算法竞赛,优点：常数空间解决环检测问题，实现简单。缺点：仅能检测环无法定位所有节点。
A200,Kadane算法,Kadane's Algorithm,动态规划,序列问题,O(n),O(1),不适用,最大子数组和,维护当前最大值和全局最大值，遍历数组时动态更新包含当前元素的最大子数组和。,计算机科学;金融分析;信号处理,优点：线性时间最优解，空间效率高。缺点：仅适用于连续子数组场景。
A201,GBDT,Gradient Boosting Decision Tree,机器学习,集成学习,O(迭代次数*样本数*特征数),O(树结构参数量),不适用,特征选择;点击率预测,基于决策树的梯度提升算法，通过迭代训练新树拟合损失函数负梯度，加权叠加所有树的结果。,人工智能;数据挖掘;商业分析,优点：处理非线性关系能力强，支持特征重要性评估。缺点：易过拟合需正则化，训练速度慢。
A202,ECC数字签名,ECDSA,密码学,数字签名,签名O(1),验证O(1),不适用,安全通信,基于椭圆曲线密码学的数字签名算法，使用私钥签名公钥验证，通过椭圆曲线点运算保证安全性。,网络安全;区块链;物联网,优点：相同安全等级下密钥长度比RSA短3倍，计算能耗低。缺点：实现需防侧信道攻击。
A203,R树,R-Tree,数据结构,空间索引,O(logN),O(N),不适用,地理信息系统,动态平衡树结构用于存储空间对象，通过最小包围矩形(MBR)进行节点划分，支持范围查询和最近邻查询。,地理信息;多媒体数据库;导航系统,优点：高效处理多维空间数据，支持动态插入删除。缺点：高维数据时存在维度灾难。
A204,萤火虫优化算法,Firefly Algorithm,优化算法,仿生算法,O(种群数*迭代次数),O(种群数),不适用,工程设计优化,模拟萤火虫亮度吸引行为，较优解的个体吸引更多搜索，通过移动策略更新位置。,机械工程;电磁学;参数调优,优点：参数少易实现，全局搜索能力强。缺点：收敛速度受吸引力系数影响显著。
A205,Aho-Corasick自动机优化,Compressed Aho-Corasick,字符串,多模式匹配,O(N+M+K),O(M),不适用,大规模病毒库扫描,改进的Aho-Corasick算法通过压缩失败指针和共用前缀节点减少内存占用。,信息安全;生物信息学;文本过滤,优点：节省50%以上内存，匹配速度提升2倍。缺点：构建过程更复杂。
A206,Cholesky分解,Cholesky Decomposition,线性代数,矩阵分解,O(n³),O(n²),不适用,协方差矩阵处理,将对称正定矩阵分解为下三角矩阵及其转置的乘积，比LU分解更高效稳定。,统计学;量子力学;经济学建模,优点：数值稳定性好，运算次数比LU分解减少一半。缺点：仅适用于对称正定矩阵。
A200,辛普森法则,Simpson's Rule,数值计算,积分方法,O(n),O(1),不适用,科学计算;工程分析,通过将积分区间分割为偶数个子区间，并用二次多项式逼近每个子区间的函数曲线，累加各子区间的面积得到积分近似值。,数学建模;物理模拟,优点：精度高于梯度法，适用于平滑函数积分。缺点：要求函数连续且分割区间需为偶数。
A201,Canny边缘检测,Canny Edge Detector,计算机视觉,边缘检测,O(N),O(N),不适用,图像识别;特征提取,多阶段算法：高斯滤波降噪→计算梯度→非极大值抑制→双阈值检测，最终提取连续边缘。,计算机视觉;自动驾驶,优点：边缘定位准确，抗噪能力强。缺点：计算复杂度较高，参数敏感。
A202,DBSCAN聚类,DBSCAN,机器学习,聚类算法,O(n log n),O(n),不适用,异常检测;地理数据分析,基于密度的聚类算法，通过定义ε邻域和最小点数，将密集区域划分为簇，并标记稀疏区域为噪声。,数据挖掘;空间分析,优点：无需预设簇数，可发现任意形状簇。缺点：对参数ε和MinPts敏感，高维数据效果下降。
A203,Huffman编码,Huffman Coding,数据压缩,无损压缩,O(n log n),O(n),不适用,文件压缩;网络传输,根据字符出现频率构建最优二叉树，高频字符使用短编码，低频字符使用长编码。,信息论;多媒体编码,优点：压缩率高，适合文本压缩。缺点：需先统计频率，对短文本效率低。
A204,牛顿迭代法,Newton-Raphson Method,数值计算,根求解,O(log n),O(1),不适用,方程求解;优化问题,通过迭代公式xₙ₊₁ = xₙ - f(xₙ)/f’(xₙ)逼近函数零点，二次收敛速度。,工程力学;金融建模,优点：收敛速度快。缺点：依赖导数计算，初始值选择不当可能发散。
A205,Floyd判圈算法,Floyd's Cycle-Finding Algorithm,算法范式,链表检测,O(n),O(1),不适用,链表环检测;内存回收,使用快慢指针（龟兔赛跑）检测循环，快指针每次移动两步，慢指针每次一步，相遇则存在环。,系统编程;垃圾回收,优点：空间最优。缺点：仅能检测环，无法定位入口点。
A206,霍夫变换,Hough Transform,计算机视觉,特征检测,O(n),O(k),不适用,直线/圆检测;自动驾驶,将图像空间中的点映射到参数空间，通过累加器投票找出高概率参数对应的几何形状。,工业检测;机器人导航,优点：抗噪能力强，可检测不完整形状。缺点：参数空间维度灾难，计算量大。
A207,布雷森算法,Bresenham's Algorithm,图形学,光栅化,O(n),O(1),不适用,直线绘制;打印机驱动,使用整数运算绘制离散像素点逼近连续直线，通过误差项判断下一点位置。,计算机图形学;嵌入式显示,优点：计算高效，无浮点运算。缺点：仅适用于直线和简单圆。
A208,Shor算法,Shor's Algorithm,量子计算,因数分解,O((log n)³),O(log n),不适用,量子密码破解;大数分解,利用量子傅里叶变换和周期查找，在多项式时间内分解大整数。,量子计算;信息安全,优点：理论上破解RSA加密。缺点：需量子计算机实现。
A209,Boyer-Moore-Galil算法,Boyer-Moore-Galil Rule,字符串,模式匹配,平均O(n/m),O(m+Σ),不适用,生物序列分析;文本处理,改进Boyer-Moore算法，通过添加额外规则减少窗口移动次数，避免最坏情况。,基因组学;搜索引擎,优点：实际运行速度优于KMP。缺点：实现复杂度高。
A210,Primality测试-AKS,AKS Primality Test,数学,素性检验,O(log⁶ n),O(log n),不适用,密码学安全验证,基于多项式同余理论的确定性算法，证明素数可在多项式时间内验证。,密码学;数论研究,优点：首个多项式时间确定性算法。缺点：实际运行慢于概率算法。
A211,Edmonds-Karp算法,Edmonds-Karp Algorithm,图算法,最大流,O(VE²),O(E),不适用,网络流优化;资源分配,BFS寻找增广路径的福特-富尔克森方法，保证多项式时间复杂度。,交通调度;供应链管理,优点：实现简单，适用于小规模网络。缺点：时间复杂度高于Dinic等算法。
A212,Dinic算法,Dinic's Algorithm,图算法,最大流,O(V²E),O(E),不适用,网络流优化;图像分割,分层图+阻塞流技术，通过构建层次网络并多次DFS寻找阻塞流提升效率。,计算机视觉;通信网络,优点：比Edmonds-Karp更高效。缺点：实现复杂，空间需求较高。
A213,Locality-Sensitive Hashing,LSH,数据结构,近邻搜索,O(n),O(n),不适用,大规模推荐系统;图像检索,设计哈希函数使相似项碰撞概率高，通过多表查询快速找到近似最近邻。,搜索引擎;生物信息学,优点：亚线性时间查询。缺点：存在误判，参数调优困难。
A214,Top Tree,Top Tree,数据结构,动态树,O(log n),O(n),不适用,网络可靠性;动态图维护,将树分解为簇的层次结构，支持动态连接/断开操作的路径查询和维护。,分布式系统;社交网络,优点：高效处理动态树操作。缺点：实现复杂，常数因子大。
A215,Mo's Algorithm,Mo's Algorithm,算法范式,离线查询,O(n√n),O(√n),不适用,区间统计问题;数据库查询,将查询按块排序后处理，通过移动左右指针离线回答多个区间查询问题。,数据库优化;竞赛编程,优点：简化复杂区间问题。缺点：仅适用于离线场景，常数大。
A216,Christofides算法,Christofides Algorithm,组合优化,TSP近似,O(n³),O(n²),不适用,旅行商问题;物流路径,结合MST和最小权完美匹配，生成1.5倍最优解的旅行商路径。,运输规划;电路板布线,优点：当前最佳近似比。缺点：仅适用于度量TSP。
A217,PageRank改进算法,PageRank with Damping,图算法,链接分析,O(n),O(n),不适用,搜索引擎优化;影响力分析,引入阻尼因子模拟随机跳转，解决原始PageRank的rank sink问题，平衡权威性和随机性。,社交网络分析;学术评价,优点：更符合真实浏览行为。缺点：计算需迭代收敛。
A218,Zobrist哈希,Zobrist Hashing,算法范式,状态编码,O(1),O(n),不适用,博弈树搜索;棋类AI,为每个可能的棋盘位置分配随机数，通过异或运算快速计算状态哈希值。,游戏AI;分布式系统,优点：碰撞概率低，动态更新快。缺点：需预存随机数表。
A219,Range Minimum Query,RMQ,数据结构,区间查询,O(1),O(n log n),不适用,生物序列分析;实时监控,稀疏表预处理，将数组划分为log段，预存每个区间的最小值索引。,物联网;金融风控,优点：查询时间O(1)。缺点：预处理时间和空间较大。
A220,Graham扫描凸包,Graham's Scan,计算几何,凸包构造,O(n log n),O(n),不适用,计算机图形学;地理信息系统,以极角排序后通过栈操作逐步构建凸包，利用叉积判断点是否在凸包上。,三维建模;路径规划,优点：时间复杂度低，逻辑清晰。缺点：对共线点处理需特殊处理。
A221,Andrew算法凸包,Andrew's Algorithm,计算几何,凸包构造,O(n log n),O(n),不适用,机器人避障;图像处理,按x坐标排序后分别构建上下凸壳，通过单调链方式合并结果。,计算几何;CAD系统,优点：无需计算极角，实现更高效。缺点：需处理重复点。
A222,Raft共识算法,Raft Consensus,分布式系统,一致性协议,O(n),O(n),不适用,分布式数据库;区块链,将共识问题分解为领导者选举、日志复制和安全性三部分，通过心跳机制维护集群一致性。,分布式存储;服务协调,优点：比Paxos更易理解，强一致性保障。缺点：性能受限于领导者单点。
A223,Chord分布式哈希,Chord DHT,分布式系统,分布式存储,O(log n),O(log n),不适用,去中心化存储;P2P网络,基于一致性哈希环构建分布式索引，通过指针表实现快速查询路由。,文件系统;内容分发网络,优点：可扩展性强，容错性好。缺点：节点频繁加入退出导致维护开销。
A224,近似顶点覆盖,Approx-Vertex Cover,组合优化,近似算法,O(E),O(E),不适用,网络监控;设施选址,贪心选择边的一端点加入覆盖集，直到所有边被覆盖。,资源调度;社交网络分析,优点：2-近似比，实现简单。缺点：无法保证最优解。
A225,FastICA独立成分分析,FastICA,机器学习,信号处理,O(n²),O(n),不适用,盲源分离;脑电波分析,通过固定点迭代最大化非高斯性，分离混合信号中的独立成分。,生物医学工程;语音处理,优点：收敛速度快，适用于非高斯信号。缺点：对噪声敏感。
A226,Count-Min Sketch,Count-Min Sketch,数据结构,概率统计,O(d),O(w*d),不适用,高频词统计;流量监控,二维哈希矩阵记录频率，查询时取各哈希函数最小值降低误差。,大数据流处理;网络监控,优点：空间效率极高，适合稀疏数据。缺点：存在正误差，不支持删除。
A227,Hopcroft-Karp算法,Hopcroft-Karp,图算法,二分匹配,O(E√V),O(V+E),不适用,任务分配;推荐系统,通过BFS分层构建分层图，再DFS寻找多条增广路径批量更新匹配。,供应链优化;匹配平台,优点：比匈牙利算法更快，适合大规模图。缺点：仅适用于二分图。
A228,Dancing Links,DLX算法,算法范式,精确覆盖,O(指数级),O(1),不适用,数独求解;拼图游戏,双向十字循环链表实现X算法的高效回溯，通过节点删除/恢复实现剪枝。,组合数学;游戏AI,优点：高效解决精确覆盖问题。缺点：实现复杂，调试困难。
A229,快速傅里叶变换,FFT,信号处理,频域分析,O(n log n),O(n),不适用,音频处理;图像压缩,分治策略将DFT分解为奇偶序列递归计算，利用复数平面旋转因子对称性。,通信系统;量子计算,优点：革命性降低时间复杂度。缺点：浮点精度误差累积。
A230,BloomFilter改进版,Blocked Bloom Filter,数据结构,成员测试,O(k),O(m),不适用,缓存过滤;数据库索引,将传统布隆过滤器分块存储，提升CPU缓存命中率，支持批量删除。,大数据系统;搜索引擎,优点：缓存友好，支持局部删除。缺点：空间利用率略低于传统版本。
A231,梯度提升决策树,GBDT,机器学习,集成学习,O(n*T),O(n*T),不适用,点击率预测;金融风控,通过迭代拟合残差构建加法模型，每步用CART树学习负梯度方向。,互联网广告;信用评估,优点：处理非线性能力强，特征重要性可解释。缺点：训练耗时，过拟合风险高。
A232,Locality-Sensitive Hashing,LSH改进版,数据结构,近邻搜索,O(n),O(n),不适用,图像检索;文档查重,复合哈希函数+投影分桶，汉明距离下保证近邻概率更高碰撞。,多媒体检索;信息安全,优点：亚线性时间查询，支持高维数据。缺点：参数调优复杂，召回率波动。
A233,Splay Tree伸展树,Splay Tree,数据结构,自调整,O(log n)均摊,O(n),不适用,内存管理;缓存系统,通过伸展操作将最近访问节点移至根部，利用局部性原理提升后续访问效率。,操作系统;数据库引擎,优点：均摊效率高，无需平衡因子维护。缺点：最坏情况退化为链表。
A234,Fourier Sparse算法,Fast Sparse FFT,信号处理,稀疏信号,O(k log n),O(k),不适用,医学成像;无线传感,针对稀疏频谱信号设计，通过频带隔离和峰值检测加速变换过程。,物联网;遥感技术,优点：比FFT更高效处理稀疏数据。缺点：当k接近n时性能下降。
A235,PageRank改进算法,Power Iteration,数学,迭代求解,O(n),O(n),不适用,网页排名;影响力分析,通过矩阵幂法迭代计算主特征向量，引入阻尼系数解决悬挂节点问题。,社交网络分析;学术评价,优点：适用于超大规模稀疏矩阵。缺点：收敛速度慢，依赖初始值。
A236,Prefix Hash Tree,PH-Tree,数据结构,多维索引,O(log n),O(n),不适用,时空数据库;游戏引擎,结合前缀树和哈希表，按Z序曲线编码组织多维数据，支持范围查询。,地理定位;虚拟现实,优点：内存效率高，支持动态更新。缺点：实现复杂度高于KD树。
A237,Swarm Intelligence蚁群优化,改进版,优化算法,仿生算法,O(mn),O(n),不适用,物流调度;无人机编队,引入自适应信息素挥发机制和禁忌搜索策略，平衡探索与开发。,智能制造;交通规划,优点：全局寻优能力增强。缺点：计算开销增加。
A238,Simulated Annealing改进版,量子退火,优化算法,随机算法,O(n²),O(n),不适用,芯片设计;密码破解,引入量子隧穿效应，允许概率性穿越局部最优陷阱，加快全局收敛。,量子计算;材料科学,优点：跳出局部最优能力更强。缺点：硬件实现难度高。
A239,HyperLogLog++,基数统计,改进版,数据结构,统计计数,O(m),O(m),不适用,UV统计;网络监控,使用分段调和修正和64位哈希，将误差率降至0.5%，支持超大数据集。,大数据分析;广告系统,优点：内存效率极高，误差可控。缺点：合并操作需严格配置。
A240,椭圆曲线加密,ECC Encryption,密码学,公钥加密,O(1)（密钥生成）,O(1),不适用,物联网设备加密;区块链签名,基于椭圆曲线数学特性，通过点乘运算实现密钥交换和数字签名，相同安全强度下密钥长度仅为RSA的1/6。,嵌入式系统;数字货币,优点：密钥短计算快，适合资源受限场景。缺点：实现需防侧信道攻击。
A241,Federated Averaging,联邦平均算法,机器学习,分布式训练,O(C·E·B)（C为客户端数）,O(D)（D为模型维度）,不适用,跨机构医疗AI;隐私保护推荐,协调多客户端本地训练后，服务器聚合模型参数而非原始数据，通过加权平均更新全局模型。,隐私计算;边缘智能,优点：数据不出域保障隐私。缺点：通信开销大，需同步协调。
A242,TinyML推理引擎,TinyML Inference,机器学习,模型压缩,O(HW)（硬件加速依赖）,O(1)（内存优化）,不适用,可穿戴设备健康监测;工业传感器,通过量化、剪枝和硬件指令集优化，在微控制器上部署超轻量神经网络。,物联网;边缘计算,优点：微瓦级功耗运行AI模型。缺点：精度损失需补偿训练。
A243,拜占庭容错共识,PBFT,分布式系统,一致性协议,O(n²),O(n),不适用,金融区块链;航天系统,三阶段投票协议容忍f个恶意节点，要求n≥3f+1，通过预准备→准备→提交流程达成共识。,高安全系统;联盟链,优点：强一致性保障。缺点：通信复杂度高，扩展性差。
A244,量子密钥分发,QKD (BB84),量子计算,加密协议,O(n),O(n),不适用,国家级通信加密;数据中心,利用量子叠加原理传输密钥，通过光子偏振态编码，窃听者测量会破坏量子态导致被检测。,国防安全;量子网络,优点：物理层防破解。缺点：需专用光纤，传输距离受限。
A245,Huffman解码加速器,Huffman Decoder,数据压缩,无损解压,O(n/b)（b为位宽）,O(2^m)（m为码长）,不适用,视频解码器;游戏引擎,预构建多级查找表，利用并行位操作和流水线技术加速变长码解码。,多媒体系统;实时传输,优点：吞吐量提升3-5倍。缺点：硬件资源消耗大。
A246,蛋白质结构预测,AlphaFold2,生物信息学,深度学习,O(L³)（L为序列长度）,O(L²),不适用,药物研发;基因工程,融合进化信息、几何约束和注意力机制，通过多模块迭代预测残基间距离矩阵和结构。,生命科学;精准医疗,优点：原子级精度突破。缺点：超算资源需求高。
A247,基因序列拼接,Megahit,生物信息学,图算法,O(kG)（k为kmer长度）,O(G),不适用,宏基因组分析;癌症突变检测,构建紧凑de Bruijn图，通过路径压缩和并行化技术高效组装海量短序列。,基因测序;生态研究,优点：内存效率比Velvet高10倍。缺点：复杂区域易产生嵌合体。
A248,分布式锁服务,Redlock,分布式系统,资源协调,O(1)（Redis操作）,O(n),不适用,电商秒杀;分布式任务调度,在多个独立Redis实例执行加锁操作，多数实例成功才视为加锁成功，设置自动过期时间。,云计算;高并发系统,优点：跨数据中心容错。缺点：依赖系统时钟同步。
A249,差分隐私噪声,DPMechanism,隐私计算,统计保护,O(1),O(1),不适用,人口普查数据发布;医疗统计,向查询结果注入拉普拉斯或高斯噪声，噪声幅度与敏感度/ε成正比，ε控制隐私预算。,政府统计;企业分析,优点：数学证明隐私边界。缺点：数据效用随ε减小下降。
A250,编译器自动并行化,Auto-Parallelizer,编译器,优化技术,O(n³)（依赖分析）,O(n²),不适用,高性能计算;AI框架编译,通过多面体模型进行循环依赖分析，将可并行代码段映射到GPU/TPU，自动插入同步指令。,超算;深度学习,优点：透明加速传统代码。缺点：复杂循环分析易失败。
A251,程序符号执行,KLEE,验证测试,路径探索,O(指数级),O(多项式),不适用,漏洞挖掘;测试用例生成,将程序变量视为符号值，使用约束求解器探索所有执行路径，生成满足条件的输入用例。,网络安全;软件工程,优点：发现深路径bug。缺点：状态爆炸限制规模。
A252,垃圾回收标记扫描,Mark-Sweep GC,系统编程,内存管理,O(n)（存活对象）,O(n),不适用,通用JVM;游戏引擎,分标记（根节点可达性分析）和清除（空闲链表维护）阶段，存在内存碎片问题。,桌面应用;服务器程序,优点：处理循环引用。缺点：暂停时间不可控。
A253,实时垃圾回收,ZGC,系统编程,内存管理,O(10ms延迟),O(4TB堆),不适用,金融交易系统;游戏服务器,染色指针+并发标记重定位，利用NUMA架构优化，亚毫秒级延迟处理TB级堆内存。,关键任务系统;云原生,优点：低延迟保障SLA。缺点：吞吐量略低于G1。
A254,编译器LLVM IR,LLVM IR,编译器,中间表示,O(n),O(n),不适用,跨平台编译;语言设计,静态单赋值形式的低阶中间语言，支持过程间优化和目标无关的指令选择。,编程语言;硬件开发,优点：模块化架构复用度高。缺点：IR转换需调试信息维护。
A255,动态二进制翻译,QEMU,系统模拟,指令转换,O(指令数×翻译开销),O(缓存大小),不适用,遗留系统迁移;异构计算,将源架构指令翻译为目标架构基本块并缓存执行，通过TCG中间表示实现跨架构兼容。,云计算;硬件仿真,优点：全系统兼容。缺点：性能损耗约20-30%。
A256,量子随机行走,QRW,量子计算,搜索算法,O(√N),O(log N),不适用,数据库检索;密码分析,利用量子叠加态在图上并行搜索，相比经典随机游走获得平方加速，用于优化问题求解。,量子算法;复杂度理论,优点：突破经典搜索界限。缺点：需量子硬件支撑。
A257,联邦学习差分隐私,Fed-DP,机器学习,隐私增强,O(C·E·ε),O(D),不适用,银行风控模型联合训练,在联邦学习参数聚合时注入可控噪声，平衡隐私预算ε和模型精度下降的关系。,金融;医疗,优点：双重隐私保障。缺点：收敛速度减缓。
A258,时空路由优化,A*+Time,搜索算法,路径规划,O((V+E)log V),O(V),不适用,无人机配送;物流调度,将时间维度引入代价函数，动态调整路径权重规避交通拥堵，支持4D（时空）导航。,智慧交通;自动驾驶,优点：实时适应环境变化。缺点：大规模路网内存占用高。
A259,流式图计算,GAS Model,大数据,分布式处理,O(Superstep×E),O(V),不适用,社交网络分析;反欺诈,采用Bulk Synchronous Parallel模型，分迭代超步执行消息传递，适用于PageRank、最短路径计算。,金融风控;推荐系统,优点：线性扩展至千节点。缺点：迭代式IO开销大。
